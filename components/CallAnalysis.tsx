'use client'

import { useState, useRef, useEffect } from 'react'
import CallStatusBadge from './CallStatusBadge'
import { getCallStatus } from '@/lib/getCallStatus'

interface CallData {
  id: string
  call_type: string
  created_at: string
  analysis_report: any
  transcript: string | null
  overall_score: number | null
  processing_status: string | null
  red_flag: boolean | null
  agent_notes: string | null
  analysis_notes: string | null
  audio_duration_seconds: number | null
  analysis_type: string | null
  error_message: string | null
  analyzed_at: string | null
  users: {
    id: string
    full_name: string | null
    email: string | null
  } | null
  companies: {
    id: string
    name: string
  } | null
  tone_analysis_report: any
  transcript_segments?: Array<{ text: string; start: number }> | null
  transcript_words?: Array<{ word: string; start: number }> | null
}

interface CallAnalysisProps {
  call: CallData
  audioUrl: string | null
  userRole?: string | null
}

export default function CallAnalysis({ call, audioUrl, userRole }: CallAnalysisProps) {
  const [activeTab, setActiveTab] = useState('summary')
  const [isPlaying, setIsPlaying] = useState(false)
  const [currentTime, setCurrentTime] = useState(0)
  const [status, setStatus] = useState<string>(call.processing_status || 'pending')
  const [errorMessage, setErrorMessage] = useState<string | null>(call.error_message || null)
  const [isPolling, setIsPolling] = useState(false)
  const [callLogs, setCallLogs] = useState<Array<{timestamp: string; message: string; data?: any}>>([])
  const [currentPlayingQuote, setCurrentPlayingQuote] = useState<string>('')
  
  const audioRef = useRef<HTMLAudioElement>(null)
  
  // ◊ô◊ô◊¶◊ï◊í ◊©◊ú ◊ñ◊û◊ü ◊ë◊§◊ï◊®◊û◊ò ◊©◊ú ◊ì◊ß◊ï◊™:◊©◊†◊ô◊ï◊™
  const formatTime = (timeInSeconds: number) => {
    const minutes = Math.floor(timeInSeconds / 60)
    const seconds = Math.floor(timeInSeconds % 60)
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`
  }
  
  // ◊ò◊ô◊§◊ï◊ú ◊ë◊ú◊ó◊ô◊¶◊î ◊¢◊ú ◊¶◊ô◊ò◊ï◊ò ◊õ◊ì◊ô ◊ú◊†◊í◊ü ◊ê◊™ ◊î◊ó◊ú◊ß ◊î◊®◊ú◊ï◊ï◊†◊ò◊ô ◊ë◊©◊û◊¢
  const playQuote = (timeInSeconds: number, quoteText: string = '') => {
    if (audioRef.current && audioUrl) {
      audioRef.current.currentTime = timeInSeconds
      audioRef.current.play()
      setIsPlaying(true)
      setCurrentPlayingQuote(quoteText)
      
      // ◊î◊ï◊°◊§◊™ ◊ê◊§◊ß◊ò ◊ï◊ô◊ñ◊ï◊ê◊ú◊ô ◊ß◊¶◊®
      const quoteBtns = document.querySelectorAll(`[data-quote="${quoteText}"]`)
      quoteBtns.forEach(btn => {
        btn.classList.add('animate-pulse')
        setTimeout(() => btn.classList.remove('animate-pulse'), 2000)
      })
    }
  }
  
  // ◊¢◊¶◊ô◊®◊™ ◊†◊ô◊í◊ï◊ü ◊î◊¶◊ô◊ò◊ï◊ò ◊î◊†◊ï◊õ◊ó◊ô
  const stopQuote = () => {
    if (audioRef.current) {
      audioRef.current.pause()
      setIsPlaying(false)
      setCurrentPlayingQuote('')
    }
  }
  
  // ◊ë◊ì◊ô◊ß◊î ◊ê◊ù ◊¶◊ô◊ò◊ï◊ò ◊û◊°◊ï◊ô◊ù ◊û◊†◊í◊ü ◊õ◊®◊í◊¢
  const isQuotePlaying = (quoteText: string) => {
    return isPlaying && currentPlayingQuote === quoteText
  }
  
  // ◊§◊ï◊†◊ß◊¶◊ô◊î ◊ó◊õ◊û◊î ◊û◊©◊ï◊§◊®◊™ ◊ú◊û◊¶◊ô◊ê◊™ timestamp ◊û◊ì◊ï◊ô◊ß ◊ú◊¶◊ô◊ò◊ï◊ò
  const findTimestampForQuote = (quoteText: string): number | null => {
    if (!call.transcript_segments || !quoteText) return null;
    
    // ◊†◊ô◊ß◊ï◊ô ◊î◊¶◊ô◊ò◊ï◊ò ◊û◊°◊ô◊û◊†◊ô ◊§◊ô◊°◊ï◊ß ◊ï◊ò◊ß◊°◊ò ◊û◊ô◊ï◊™◊®
    const cleanQuote = quoteText.replace(/[.,!?;"'()[\]{}]/g, '').toLowerCase().trim();
    const quoteWords = cleanQuote.split(/\s+/).filter(word => word.length > 2);
    
    if (quoteWords.length === 0) return null;
    
    let bestMatch: { segment: any; score: number; timestamp: number | null } = { segment: null, score: 0, timestamp: null };
    
    // ◊ó◊ô◊§◊ï◊© ◊û◊™◊ß◊ì◊ù ◊ësegments
    for (const segment of call.transcript_segments) {
      if (!segment.text || !segment.start) continue;
      
      const segmentText = segment.text.replace(/[.,!?;"'()[\]{}]/g, '').toLowerCase();
      let matchScore = 0;
      
      // ◊ë◊ì◊ô◊ß◊î ◊û◊ì◊ï◊ô◊ß◊™ - ◊î◊¶◊ô◊ò◊ï◊ò ◊î◊û◊ú◊ê ◊û◊ï◊§◊ô◊¢ ◊ësegment
      if (segmentText.includes(cleanQuote)) {
        return segment.start;
      }
      
      // ◊ë◊ì◊ô◊ß◊™ ◊î◊™◊ê◊û◊î ◊ó◊ú◊ß◊ô◊™ ◊¢◊ù ◊†◊ô◊ß◊ï◊ì
      const segmentWords = segmentText.split(/\s+/);
      const matchedWords = quoteWords.filter(word => 
        segmentWords.some(segWord => 
          segWord.includes(word) || word.includes(segWord) || 
          (word.length > 3 && segWord.length > 3 && levenshteinDistance(word, segWord) <= 1)
        )
      );
      
      matchScore = matchedWords.length / quoteWords.length;
      
      // ◊ê◊ù ◊ñ◊î ◊î◊î◊™◊ê◊û◊î ◊î◊ò◊ï◊ë◊î ◊ë◊ô◊ï◊™◊® ◊¢◊ì ◊õ◊î
      if (matchScore > bestMatch.score && matchScore >= 0.6) {
        bestMatch = { segment: segment, score: matchScore, timestamp: segment.start };
      }
    }
    
    // ◊ê◊ù ◊û◊¶◊ê◊†◊ï ◊î◊™◊ê◊û◊î ◊°◊ë◊ô◊®◊î
    if (bestMatch.timestamp && bestMatch.score >= 0.6) {
      return bestMatch.timestamp;
    }
    
    // ◊í◊ô◊ë◊ï◊ô - ◊ó◊ô◊§◊ï◊© ◊ë◊û◊ô◊ú◊ô◊ù ◊ë◊ï◊ì◊ì◊ï◊™
    if (call.transcript_words && call.transcript_words.length > 0) {
      const firstQuoteWord = quoteWords[0];
      const matchingWord = call.transcript_words.find((word: any) => 
        word.word && (
          word.word.toLowerCase().includes(firstQuoteWord) ||
          firstQuoteWord.includes(word.word.toLowerCase()) ||
          (firstQuoteWord.length > 3 && word.word.length > 3 && 
           levenshteinDistance(firstQuoteWord, word.word.toLowerCase()) <= 1)
        )
      );
      
      if (matchingWord && matchingWord.start !== undefined) {
        return matchingWord.start;
      }
    }
    
    return null;
  }
  
  // ◊§◊ï◊†◊ß◊¶◊ô◊î ◊¢◊ñ◊® ◊ú◊ó◊ô◊©◊ï◊ë ◊û◊®◊ó◊ß Levenshtein (◊ì◊û◊ô◊ï◊ü ◊ë◊ô◊ü ◊û◊ô◊ú◊ô◊ù)
  const levenshteinDistance = (str1: string, str2: string): number => {
    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));
    
    for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;
    for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;
    
    for (let j = 1; j <= str2.length; j++) {
      for (let i = 1; i <= str1.length; i++) {
        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
        matrix[j][i] = Math.min(
          matrix[j][i - 1] + 1,
          matrix[j - 1][i] + 1,
          matrix[j - 1][i - 1] + indicator,
        );
      }
    }
    
    return matrix[str2.length][str1.length];
  }
  
  // ◊¢◊ì◊õ◊ï◊ü ◊ñ◊û◊ü ◊î◊†◊ô◊í◊ï◊ü ◊î◊†◊ï◊õ◊ó◊ô ◊ï◊û◊¢◊ß◊ë ◊ê◊ó◊® ◊ê◊ô◊®◊ï◊¢◊ô ◊ê◊ï◊ì◊ô◊ï
  useEffect(() => {
    const audioElement = audioRef.current
    if (!audioElement) return
    
    const updateTime = () => {
      setCurrentTime(audioElement.currentTime)
    }
    
    const handlePause = () => {
      setIsPlaying(false)
      setCurrentPlayingQuote('')
    }
    
    const handleEnded = () => {
      setIsPlaying(false)
      setCurrentPlayingQuote('')
    }
    
    const handlePlay = () => {
      setIsPlaying(true)
    }
    
    audioElement.addEventListener('timeupdate', updateTime)
    audioElement.addEventListener('pause', handlePause)
    audioElement.addEventListener('ended', handleEnded)
    audioElement.addEventListener('play', handlePlay)
    
    return () => {
      audioElement.removeEventListener('timeupdate', updateTime)
      audioElement.removeEventListener('pause', handlePause)
      audioElement.removeEventListener('ended', handleEnded)
      audioElement.removeEventListener('play', handlePlay)
    }
  }, [])
  
  // ◊†◊ô◊ß◊ï◊ô ◊î◊¶◊ô◊ò◊ï◊ò ◊î◊†◊ï◊õ◊ó◊ô ◊õ◊©◊û◊©◊†◊ô◊ù ◊ò◊ê◊ë
  useEffect(() => {
    setCurrentPlayingQuote('')
  }, [activeTab])
  
  // Real-time subscription ◊ú◊¢◊ì◊õ◊ï◊†◊ô ◊°◊ò◊ò◊ï◊° (◊ú◊ú◊ê ◊§◊ï◊ú◊ô◊†◊í ◊û◊ò◊ï◊®◊£!)
  useEffect(() => {
    if (['pending', 'processing', 'transcribing', 'analyzing_tone', 'analyzing_content'].includes(status)) {
      setIsPolling(true)
      
      // ◊î◊ï◊°◊§◊™ real-time subscription ◊ú◊ò◊ë◊ú◊™ calls - ◊ñ◊î ◊î◊û◊†◊í◊†◊ï◊ü ◊î◊¢◊ô◊ß◊®◊ô!
      const { createClient } = require('@supabase/supabase-js')
      const supabase = createClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
      )
      
      // ◊ô◊¶◊ô◊®◊™ subscription ◊ú◊©◊ô◊†◊ï◊ô◊ô◊ù ◊ë◊©◊ô◊ó◊î ◊î◊°◊§◊¶◊ô◊§◊ô◊™
      const subscription = supabase
        .channel(`call-${call.id}`)
        .on('postgres_changes', {
          event: 'UPDATE',
          schema: 'public',
          table: 'calls',
          filter: `id=eq.${call.id}`
        }, (payload: any) => {
          console.log('üîÑ Real-time update received:', payload.new)
          
          const newStatus = payload.new.processing_status
          if (newStatus && newStatus !== status) {
            console.log(`üìä Status changed from ${status} to ${newStatus}`)
            setStatus(newStatus)
            
            // ◊ê◊ù ◊î◊°◊ò◊ò◊ï◊° ◊î◊©◊™◊†◊î ◊ú-completed, ◊¢◊¶◊ï◊® ◊§◊ï◊ú◊ô◊†◊í
            if (newStatus === 'completed') {
              setIsPolling(false)
              console.log('‚úÖ Analysis completed via real-time subscription')
            }
          }
        })
        .subscribe()
      
      console.log('üîó Real-time subscription created for call:', call.id)
      
      // ◊§◊ï◊ú◊ô◊†◊í ◊†◊ì◊ô◊® ◊ë◊ú◊ë◊ì ◊õ◊í◊ô◊ë◊ï◊ô (◊õ◊ú 30 ◊©◊†◊ô◊ï◊™, ◊û◊ß◊°◊ô◊û◊ï◊ù 10 ◊§◊¢◊û◊ô◊ù = 5 ◊ì◊ß◊ï◊™)
      let pollCount = 0
      const maxPolls = 10 // ◊û◊ß◊°◊ô◊û◊ï◊ù 10 ◊ë◊ì◊ô◊ß◊ï◊™
      const pollInterval = 30000 // ◊õ◊ú 30 ◊©◊†◊ô◊ï◊™
      
      const intervalId = setInterval(async () => {
        pollCount++
        console.log(`üîç Backup polling check #${pollCount} (every 30s)`)
        
        try {
          const response = await fetch(`/api/call-status/${call.id}`)
          const data = await response.json()
          
          if (data.status && data.status !== status) {
            console.log(`üìà Backup poll found status update: ${status} ‚Üí ${data.status}`)
            setStatus(data.status)
            
            if (data.status === 'completed') {
              setIsPolling(false)
              clearInterval(intervalId)
              console.log('‚úÖ Analysis completed via backup polling')
            }
          }
        } catch (error) {
          console.error('Error in backup polling:', error)
        }
        
        if (pollCount >= maxPolls) {
          console.log('‚è∞ Max backup polls reached - stopping')
          clearInterval(intervalId)
          setIsPolling(false)
        }
        
        if (status === 'completed') {
          console.log('üéØ Status is completed - stopping backup polling')
          clearInterval(intervalId)
          setIsPolling(false)
        }
      }, pollInterval)
      
      return () => {
        clearInterval(intervalId)
        subscription.unsubscribe()
        console.log('üîå Real-time subscription cleaned up for call:', call.id)
      }
    }
  }, [status, call.id])

  // State ◊ú◊†◊ô◊î◊ï◊ú ◊î◊™◊ß◊ì◊û◊ï◊™ ◊ë◊î◊™◊ë◊°◊° ◊¢◊ú ◊ú◊ï◊í◊ô◊ù ◊ê◊û◊ô◊™◊ô◊ô◊ù
  const [logBasedProgress, setLogBasedProgress] = useState(0)
  const [currentLogStatus, setCurrentLogStatus] = useState('')
  const [lastProcessedLogIndex, setLastProcessedLogIndex] = useState(0)

  // ◊§◊ï◊†◊ß◊¶◊ô◊î ◊ú◊ó◊ô◊©◊ï◊ë progress ◊û◊ì◊ï◊ô◊ß ◊ú◊§◊ô ◊ú◊ï◊í◊ô◊ù ◊©◊ú Vercel
  const calculateProgressFromLogs = (logs: any[]) => {
    if (!logs || logs.length === 0) return 0
    
    // ◊û◊§◊™ ◊î◊™◊ß◊ì◊û◊ï◊™ ◊ú◊§◊ô ◊î◊ï◊ì◊¢◊ï◊™ ◊ú◊ï◊í ◊°◊§◊¶◊ô◊§◊ô◊ï◊™ ◊û-Vercel
    const logProgressMap: Record<string, number> = {
      // ◊î◊™◊ó◊ú◊î
      'üöÄ ◊î◊™◊ó◊ú◊™ ◊™◊î◊ú◊ô◊ö ◊†◊ô◊™◊ï◊ó ◊©◊ô◊ó◊î': 5,
      '‚úÖ ◊ß◊ô◊©◊ï◊® ◊î◊ê◊ï◊ì◊ô◊ï ◊†◊ï◊¶◊® ◊ë◊î◊¶◊ú◊ó◊î': 10,
      
      // ◊™◊û◊ú◊ï◊ú
      'üìù ◊û◊™◊ó◊ô◊ú ◊™◊î◊ú◊ô◊ö ◊™◊û◊ú◊ï◊ú ◊©◊ô◊ó◊î': 15,
      '‚¨áÔ∏è ◊û◊ï◊®◊ô◊ì ◊ß◊ï◊ë◊• ◊ê◊ï◊ì◊ô◊ï ◊û◊î◊©◊®◊™': 20,
      '‚úÖ ◊ß◊ï◊ë◊• ◊ê◊ï◊ì◊ô◊ï ◊î◊ï◊®◊ì ◊ë◊î◊¶◊ú◊ó◊î': 25,
      'üì° ◊™◊©◊ï◊ë◊™ Whisper API ◊î◊™◊ß◊ë◊ú◊î': 35,
      '‚úÖ ◊™◊û◊ú◊ï◊ú ◊î◊ï◊©◊ú◊ù ◊ë◊î◊¶◊ú◊ó◊î': 45,
      
      // ◊†◊ô◊™◊ï◊ó ◊ò◊ï◊†◊¶◊ô◊î
      'üé≠ ◊û◊™◊ó◊ô◊ú ◊†◊ô◊™◊ï◊ó ◊ò◊ï◊†◊¶◊ô◊î': 50,
      'üîÑ ◊û◊õ◊ô◊ü ◊ë◊ß◊©◊î ◊ú◊†◊ô◊™◊ï◊ó ◊ò◊ï◊†◊¶◊ô◊î ◊¢◊ù GPT-4o-audio': 55,
      '‚úÖ ◊™◊©◊ï◊ë◊™ OpenAI ◊î◊™◊ß◊ë◊ú◊î ◊ú◊†◊ô◊™◊ï◊ó ◊ò◊ï◊†◊¶◊ô◊î': 65,
      '‚úÖ ◊†◊ô◊™◊ï◊ó ◊ò◊ï◊†◊¶◊ô◊î ◊î◊ï◊©◊ú◊ù ◊ë◊î◊¶◊ú◊ó◊î': 70,
      
      // ◊†◊ô◊™◊ï◊ó ◊™◊ï◊õ◊ü
      'üìä ◊û◊™◊ó◊ô◊ú ◊†◊ô◊™◊ï◊ó ◊™◊ï◊õ◊ü': 75,
      'üîÑ ◊©◊ï◊ú◊ó ◊ë◊ß◊©◊î ◊ú◊†◊ô◊™◊ï◊ó ◊™◊ï◊õ◊ü ◊ú-gpt-4.1-2025-04-14': 80,
      '‚úÖ ◊™◊©◊ï◊ë◊™ OpenAI ◊î◊™◊ß◊ë◊ú◊î ◊ú◊†◊ô◊™◊ï◊ó ◊™◊ï◊õ◊ü': 90,
      '‚úÖ ◊†◊ô◊™◊ï◊ó ◊™◊ï◊õ◊ü ◊î◊ï◊©◊ú◊ù ◊ë◊î◊¶◊ú◊ó◊î': 95,
      
      // ◊î◊©◊ú◊û◊î
      '‚úÖ ◊ò◊ë◊ú◊™ calls ◊¢◊ï◊ì◊õ◊†◊î ◊ë◊î◊¶◊ú◊ó◊î': 98,
      'üèÅ ◊†◊ô◊™◊ï◊ó ◊î◊©◊ô◊ó◊î ◊î◊ï◊©◊ú◊ù': 100,
      'üèÅ ◊†◊ô◊™◊ï◊ó ◊ò◊ï◊†◊¶◊ô◊î ◊î◊ï◊©◊ú◊ù': 100
    }
    
    let maxProgress = 0
    let latestMessage = ''
    
    // ◊ó◊ô◊§◊ï◊© ◊î◊î◊™◊ß◊ì◊û◊ï◊™ ◊î◊û◊ß◊°◊ô◊û◊ú◊ô◊™ ◊ï◊î◊ï◊ì◊¢◊î ◊î◊ê◊ó◊®◊ï◊†◊î
    for (const log of logs) {
      const message = log.message
      
      // ◊ó◊ô◊§◊ï◊© ◊î◊™◊ê◊û◊î ◊û◊ì◊ï◊ô◊ß◊™
      if (logProgressMap[message]) {
        if (logProgressMap[message] > maxProgress) {
          maxProgress = logProgressMap[message]
          latestMessage = message
        }
      } else {
        // ◊ó◊ô◊§◊ï◊© ◊î◊™◊ê◊û◊î ◊ó◊ú◊ß◊ô◊™
        for (const [logKey, progress] of Object.entries(logProgressMap)) {
          if (message.includes(logKey.split(' ')[0]) || logKey.includes(message.split(' ')[0])) {
            if (progress > maxProgress) {
              maxProgress = progress
              latestMessage = message
            }
          }
        }
      }
      
      // ◊ñ◊ô◊î◊ï◊ô ◊©◊í◊ô◊ê◊ï◊™
      if (message.includes('‚ùå') || message.includes('◊©◊í◊ô◊ê◊î')) {
        // ◊ê◊ù ◊ô◊© ◊©◊í◊ô◊ê◊î, ◊†◊©◊û◊ï◊® ◊¢◊ú ◊î◊î◊™◊ß◊ì◊û◊ï◊™ ◊î◊ê◊ó◊®◊ï◊†◊î ◊ê◊ë◊ú ◊†◊¢◊ì◊õ◊ü ◊ê◊™ ◊î◊î◊ï◊ì◊¢◊î
        latestMessage = message
      }
    }
    
    setCurrentLogStatus(latestMessage)
    return maxProgress
  }

  // ◊û◊¢◊®◊õ◊™ ◊®◊ô◊¢◊†◊ï◊ü ◊ú◊ï◊í◊ô◊ù ◊ë◊ñ◊û◊ü ◊ê◊û◊™
  useEffect(() => {
    if (['pending', 'processing', 'transcribing', 'analyzing_tone', 'analyzing_content'].includes(status)) {
      const fetchLogs = async () => {
        try {
          const logsResponse = await fetch(`/api/call-logs/${call.id}`)
          const logsData = await logsResponse.json()
          
          if (logsData.logs && logsData.logs.length > 0) {
            // ◊¢◊ì◊õ◊ï◊ü ◊®◊ß ◊ê◊ù ◊ô◊© ◊ú◊ï◊í◊ô◊ù ◊ó◊ì◊©◊ô◊ù
            if (logsData.logs.length > lastProcessedLogIndex) {
              const newLogs = logsData.logs.slice(lastProcessedLogIndex)
              console.log('üìä ◊ú◊ï◊í◊ô◊ù ◊ó◊ì◊©◊ô◊ù ◊ñ◊ï◊î◊ï:', newLogs.length)
              
              // ◊ó◊ô◊©◊ï◊ë ◊î◊™◊ß◊ì◊û◊ï◊™ ◊û◊¢◊ï◊ì◊õ◊†◊™
              const newProgress = calculateProgressFromLogs(logsData.logs)
              
              if (newProgress > logBasedProgress) {
                setLogBasedProgress(newProgress)
                console.log(`üìà ◊î◊™◊ß◊ì◊û◊ï◊™ ◊¢◊ï◊ì◊õ◊†◊î ◊ú◊ú◊ï◊í◊ô◊ù: ${newProgress}%`)
              }
              
              setLastProcessedLogIndex(logsData.logs.length)
              
              // ◊¢◊ì◊õ◊ï◊ü ◊î◊ú◊ï◊í◊ô◊ù ◊î◊û◊ï◊¶◊í◊ô◊ù
              setCallLogs(logsData.logs)
              
                             // ◊ë◊ì◊ô◊ß◊î ◊ê◊ù ◊î◊ï◊©◊ú◊ù
               const hasCompletionLog = logsData.logs.some((log: any) => 
                 log.message.includes('üèÅ ◊†◊ô◊™◊ï◊ó') && log.message.includes('◊î◊ï◊©◊ú◊ù')
               )
              
              if (hasCompletionLog && status !== 'completed') {
                console.log('‚úÖ ◊ñ◊ï◊î◊î ◊î◊©◊ú◊û◊™ ◊†◊ô◊™◊ï◊ó ◊û◊î◊ú◊ï◊í◊ô◊ù - ◊û◊¢◊ì◊õ◊ü ◊°◊ò◊ò◊ï◊°')
                setStatus('completed')
              }
            }
          }
        } catch (error) {
          console.error('◊©◊í◊ô◊ê◊î ◊ë◊ß◊®◊ô◊ê◊™ ◊ú◊ï◊í◊ô◊ù:', error)
        }
      }
      
      // ◊ß◊®◊ô◊ê◊î ◊®◊ê◊©◊ï◊†◊ô◊™
      fetchLogs()
      
      // ◊ß◊®◊ô◊ê◊î ◊õ◊ú 2 ◊©◊†◊ô◊ï◊™
      const logsInterval = setInterval(fetchLogs, 2000)
      
      return () => clearInterval(logsInterval)
    }
  }, [status, call.id, lastProcessedLogIndex, logBasedProgress])

  // ◊§◊ï◊†◊ß◊¶◊ô◊î ◊ú◊ó◊ô◊©◊ï◊ë progress ◊ì◊ô◊†◊û◊ô - ◊¢◊õ◊©◊ô◊ï ◊û◊©◊™◊û◊©◊™ ◊ë◊ú◊ï◊í◊ô◊ù ◊ê◊û◊ô◊™◊ô◊ô◊ù
  const calculateDynamicProgress = () => {
    // ◊ê◊ù ◊ô◊© ◊ú◊†◊ï progress ◊û◊î◊ú◊ï◊í◊ô◊ù, ◊†◊©◊™◊û◊© ◊ë◊ï
    if (logBasedProgress > 0) {
      return logBasedProgress
    }
    
    // fallback ◊ú◊û◊ô◊§◊ï◊ô ◊î◊ô◊©◊ü ◊ê◊ù ◊ê◊ô◊ü ◊ú◊ï◊í◊ô◊ù
    const statusMapping = {
      'pending': 5,
      'processing': 10,
      'transcribing': 25,
      'analyzing_tone': 55,
      'analyzing_content': 85,
      'completed': 100,
      'error': 0
    }

    return statusMapping[status as keyof typeof statusMapping] || 0
  }

  // State ◊úprogreaa ◊î◊ì◊ô◊†◊û◊ô
  const [dynamicProgress, setDynamicProgress] = useState(calculateDynamicProgress())

  // ◊¢◊ì◊õ◊ï◊ü progress ◊ë◊ñ◊û◊ü ◊ê◊û◊™
  useEffect(() => {
    if (['pending', 'processing', 'transcribing', 'analyzing_tone', 'analyzing_content'].includes(status)) {
      const progressInterval = setInterval(() => {
        setDynamicProgress(calculateDynamicProgress())
      }, 500) // ◊¢◊ì◊õ◊ï◊ü ◊õ◊ú ◊ó◊¶◊ô ◊©◊†◊ô◊ô◊î ◊ú◊ê◊†◊ô◊û◊¶◊ô◊î ◊ó◊ú◊ß◊î

      return () => clearInterval(progressInterval)
    } else if (status === 'completed') {
      // ◊ï◊ï◊ì◊ê ◊©◊îprogress ◊î◊ï◊ê 100% ◊õ◊©◊î◊°◊ò◊ò◊ï◊° completed
      setDynamicProgress(100)
    }
  }, [status, call.created_at])

  // State ◊†◊ï◊°◊£ ◊ú◊ê◊†◊ô◊û◊¶◊ô◊ô◊™ ◊î◊¶◊ú◊ó◊î
  const [showSuccessAnimation, setShowSuccessAnimation] = useState(false)
  const [countdown, setCountdown] = useState(3)
  const [hasCompletedOnce, setHasCompletedOnce] = useState(false) // ◊ú◊û◊†◊ô◊¢◊™ ◊ú◊ï◊§
  const [shouldShowAnalysis, setShouldShowAnalysis] = useState(false)

  // ◊ò◊ô◊§◊ï◊ú ◊û◊ô◊ï◊ó◊ì ◊ë◊°◊ò◊ò◊ï◊° completed - ◊û◊¢◊ë◊® ◊ú◊†◊ô◊™◊ï◊ó ◊ê◊ï◊ò◊ï◊û◊ò◊ô◊™
  useEffect(() => {
    if (status === 'completed' && !hasCompletedOnce) {
      console.log('‚úÖ ◊†◊ô◊™◊ï◊ó ◊î◊©◊ô◊ó◊î ◊î◊ï◊©◊ú◊ù - ◊ë◊ï◊ì◊ß ◊ê◊ù ◊ô◊© ◊†◊ô◊™◊ï◊ó ◊ß◊ô◊ô◊ù')
      setHasCompletedOnce(true) // ◊û◊ï◊†◊¢ ◊ú◊ï◊§
      setDynamicProgress(100)
      setShowSuccessAnimation(true)
      
      // ◊ë◊ì◊ô◊ß◊î ◊ê◊ù ◊ô◊© ◊õ◊ë◊® ◊†◊ô◊™◊ï◊ó ◊ë◊û◊°◊ì ◊î◊†◊™◊ï◊†◊ô◊ù
      const hasExistingAnalysis = call.analysis_report && call.tone_analysis_report && 
                                  Object.keys(call.analysis_report).length > 0 && 
                                  Object.keys(call.tone_analysis_report).length > 0
      
      if (hasExistingAnalysis) {
        console.log('‚úÖ ◊î◊†◊ô◊™◊ï◊ó ◊õ◊ë◊® ◊ß◊ô◊ô◊ù ◊ë◊û◊°◊ì ◊î◊†◊™◊ï◊†◊ô◊ù - ◊û◊¶◊ô◊í ◊ê◊ï◊™◊ï')
        setCountdown(0)
        // ◊†◊™◊ü ◊ñ◊û◊ü ◊ß◊¶◊® ◊ú◊ê◊†◊ô◊û◊¶◊ô◊î ◊ï◊ê◊ñ ◊†◊¢◊ë◊ï◊® ◊ú◊†◊ô◊™◊ï◊ó
        setTimeout(() => {
          setShouldShowAnalysis(true)
        }, 2000)
      } else {
        console.log('üîÑ ◊ê◊ô◊ü ◊†◊ô◊™◊ï◊ó ◊ë◊û◊°◊ì ◊î◊†◊™◊ï◊†◊ô◊ù - ◊ò◊ï◊¢◊ü ◊û◊ó◊ì◊© ◊ú◊ß◊ë◊ú◊™ ◊î◊†◊ô◊™◊ï◊ó')
        // ◊°◊§◊ô◊®◊î ◊ú◊ê◊ó◊ï◊® ◊ï◊ê◊ñ ◊ò◊¢◊ô◊†◊î ◊û◊ó◊ï◊ì◊©◊™
        const countdownInterval = setInterval(() => {
          setCountdown(prev => {
            if (prev <= 1) {
              clearInterval(countdownInterval)
              console.log('üîÑ ◊ò◊ï◊¢◊ü ◊ê◊™ ◊î◊†◊ô◊™◊ï◊ó ◊î◊û◊ï◊©◊ú◊ù')
              window.location.reload()
              return 0
            }
            return prev - 1
          })
        }, 1000)

        return () => clearInterval(countdownInterval)
      }
    }
  }, [status, hasCompletedOnce, call.analysis_report, call.tone_analysis_report])
  
  // ◊î◊¶◊í◊™ ◊°◊ò◊ò◊ï◊° ◊î◊¢◊ô◊ë◊ï◊ì ◊¢◊ù ◊î◊ï◊ì◊¢◊î ◊û◊ô◊ï◊ó◊ì◊™ ◊úcompleted
  // ◊ê◊ë◊ú ◊®◊ß ◊ê◊ù ◊¢◊ì◊ô◊ô◊ü ◊ú◊ê ◊ê◊û◊ï◊®◊ô◊ù ◊ú◊î◊¶◊ô◊í ◊ê◊™ ◊î◊†◊ô◊™◊ï◊ó
  if ((['pending', 'processing', 'transcribing', 'analyzing_tone', 'analyzing_content', 'completed'].includes(status) || isPolling) && !shouldShowAnalysis) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-xl shadow-lg p-8">
            <div className="flex flex-col items-center justify-center">
              <div className="mb-6">
                <CallStatusBadge status={status} />
              </div>
              
              <h2 className="text-2xl font-bold mb-3 text-center text-gray-800">
                {status === 'completed' 
                  ? '◊†◊ô◊™◊ï◊ó ◊î◊©◊ô◊ó◊î ◊î◊ï◊©◊ú◊ù! üéâ' 
                  : '◊î◊©◊ô◊ó◊î ◊†◊û◊¶◊ê◊™ ◊ë◊™◊î◊ú◊ô◊ö ◊¢◊ô◊ë◊ï◊ì'
                }
              </h2>
              
              <p className="text-gray-600 mb-4 text-center max-w-md">
                {status === 'completed' 
                  ? '◊î◊†◊ô◊™◊ï◊ó ◊î◊ï◊©◊ú◊ù ◊ë◊î◊¶◊ú◊ó◊î! ◊ò◊ï◊¢◊ü ◊ê◊™ ◊î◊™◊ï◊¶◊ê◊ï◊™...'
                  : '◊ê◊†◊ï ◊û◊†◊™◊ó◊ô◊ù ◊ê◊™ ◊î◊©◊ô◊ó◊î ◊©◊ú◊ö ◊ë◊ê◊û◊¶◊¢◊ï◊™ ◊ë◊ô◊†◊î ◊û◊ú◊ê◊õ◊ï◊™◊ô◊™ ◊û◊™◊ß◊ì◊û◊™. ◊î◊™◊î◊ú◊ô◊ö ◊¢◊©◊ï◊ô ◊ú◊ß◊ó◊™ ◊û◊°◊§◊® ◊ì◊ß◊ï◊™.'
                }
              </p>
              
              {status === 'analyzing_tone' && (
                <div className="mb-6 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                  <p className="text-sm text-yellow-800 text-center">
                    üé≠ ◊û◊ë◊¶◊¢ ◊†◊ô◊™◊ï◊ó ◊ò◊ï◊†◊¶◊ô◊î ◊û◊™◊ß◊ì◊ù - ◊î◊ì◊£ ◊ô◊™◊¢◊ì◊õ◊ü ◊ê◊ï◊ò◊ï◊û◊ò◊ô◊ß◊ô◊™ ◊ë◊®◊í◊¢ ◊î◊©◊ú◊û◊™ ◊î◊†◊ô◊™◊ï◊ó
                  </p>
                </div>
              )}

              {status === 'completed' && countdown > 0 && (
                <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                  <p className="text-sm text-green-800 text-center font-medium mb-3">
                    ‚úÖ ◊î◊†◊ô◊™◊ï◊ó ◊î◊ï◊©◊ú◊ù ◊ë◊î◊¶◊ú◊ó◊î! ◊ò◊ï◊¢◊ü ◊ê◊™ ◊î◊™◊ï◊¶◊ê◊ï◊™ ◊ë◊¢◊ï◊ì {countdown} ◊©◊†◊ô◊ï◊™...
                  </p>
                  <div className="flex justify-center">
                    <button
                      onClick={() => window.location.reload()}
                      className="px-4 py-2 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 transition-colors font-medium"
                    >
                      üöÄ ◊ò◊¢◊ü ◊¢◊õ◊©◊ô◊ï
                    </button>
                  </div>
                </div>
              )}

              {status === 'completed' && countdown === 0 && (
                <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                  <p className="text-sm text-green-800 text-center font-medium">
                    ‚úÖ ◊î◊†◊ô◊™◊ï◊ó ◊î◊ï◊©◊ú◊ù! ◊û◊¢◊ë◊® ◊ú◊™◊ï◊¶◊ê◊ï◊™...
                  </p>
                </div>
              )}
              
              {/* ◊û◊ì ◊î◊™◊ß◊ì◊û◊ï◊™ ◊û◊¢◊ï◊¶◊ë - ◊¢◊ù progress ◊ì◊ô◊†◊û◊ô */}
              <div className="w-full max-w-lg mx-auto mb-8">
                <div className="flex items-center justify-between mb-3">
                  <span className="text-sm font-semibold text-blue-600">
                    {status === 'pending' ? 'üîÑ ◊ò◊ï◊¢◊ü ◊û◊©◊ê◊ë◊ô◊ù' :
                     status === 'processing' ? '‚öôÔ∏è ◊û◊õ◊ô◊ü ◊ú◊¢◊ô◊ë◊ï◊ì' :
                     status === 'transcribing' ? 'üìù ◊™◊û◊ú◊ï◊ú ◊î◊©◊ô◊ó◊î' :
                     status === 'analyzing_tone' ? 'üé≠ ◊†◊ô◊™◊ï◊ó ◊ò◊ï◊†◊¶◊ô◊î' :
                     status === 'analyzing_content' ? 'üìä ◊†◊ô◊™◊ï◊ó ◊™◊ï◊õ◊ü' :
                     status === 'completed' ? '‚úÖ ◊î◊ï◊©◊ú◊ù' :
                     '◊û◊¢◊ë◊ì...'}
                  </span>
                  <span className="text-sm font-bold text-blue-600 transition-all duration-500">
                    {dynamicProgress}%
                  </span>
                </div>
                                 <div className="overflow-hidden h-3 bg-blue-100 rounded-full relative">
                   <div 
                     style={{ width: `${dynamicProgress}%` }} 
                     className={`h-full rounded-full transition-all duration-500 ease-out ${
                       status === 'completed' 
                         ? 'bg-gradient-to-r from-green-500 to-green-600' 
                         : 'bg-gradient-to-r from-blue-500 to-blue-600'
                     } ${showSuccessAnimation ? 'animate-pulse' : ''}`}
                   />
                   {/* ◊ê◊§◊ß◊ò ◊ñ◊ï◊î◊® ◊û◊™◊ß◊ì◊ù */}
                   <div 
                     style={{ width: `${dynamicProgress}%` }} 
                     className={`h-full rounded-full opacity-60 absolute top-0 ${
                       status === 'completed' 
                         ? 'bg-gradient-to-r from-green-400 to-green-500 animate-ping' 
                         : 'bg-gradient-to-r from-blue-400 to-blue-500 animate-pulse'
                     }`}
                   />
                   {/* ◊ê◊§◊ß◊ò ◊õ◊ï◊õ◊ë◊ô◊ù ◊û◊ô◊ï◊ó◊ì ◊ú-completed */}
                   {status === 'completed' && showSuccessAnimation && (
                     <div className="absolute inset-0 flex justify-center items-center">
                       <span className="text-xs text-white font-bold animate-bounce">‚ú®</span>
                     </div>
                   )}
                 </div>
                
                {/* ◊û◊ó◊ï◊ï◊ü ◊û◊ô◊ú◊ï◊ú◊ô ◊û◊™◊ß◊ì◊ù - ◊û◊ë◊ï◊°◊° ◊¢◊ú ◊ú◊ï◊í◊ô◊ù ◊ê◊û◊ô◊™◊ô◊ô◊ù */}
                <div className="mt-2 text-xs text-gray-500 text-center">
                  {currentLogStatus ? (
                    <span className="font-medium text-blue-600">
                      {currentLogStatus.replace(/[üöÄüìùüé≠üìä‚úÖüîÑ‚¨áÔ∏èüì°üèÅ‚ùå]/g, '').trim()}
                    </span>
                  ) : (
                    <>
                      {status === 'pending' && dynamicProgress < 10 && '◊û◊õ◊ô◊ü ◊ê◊™ ◊î◊û◊¢◊®◊õ◊™ ◊ú◊¢◊ô◊ë◊ï◊ì...'}
                      {status === 'pending' && dynamicProgress >= 10 && '◊ò◊ï◊¢◊ü ◊ê◊™ ◊ß◊ï◊ë◊• ◊î◊ê◊ï◊ì◊ô◊ï...'}
                      {status === 'processing' && '◊û◊™◊ó◊ô◊ú ◊™◊î◊ú◊ô◊ö ◊†◊ô◊™◊ï◊ó ◊î◊©◊ô◊ó◊î...'}
                      {status === 'transcribing' && dynamicProgress < 30 && '◊û◊™◊ó◊ô◊ú ◊™◊û◊ú◊ï◊ú ◊î◊©◊ô◊ó◊î...'}
                      {status === 'transcribing' && dynamicProgress >= 30 && '◊û◊û◊©◊ô◊ö ◊ë◊™◊û◊ú◊ï◊ú ◊û◊ì◊ï◊ô◊ß...'}
                      {status === 'analyzing_tone' && dynamicProgress < 60 && '◊û◊†◊™◊ó ◊ò◊ï◊ü ◊ï◊®◊í◊©...'}
                      {status === 'analyzing_tone' && dynamicProgress >= 60 && '◊û◊°◊ô◊ô◊ù ◊†◊ô◊™◊ï◊ó ◊ò◊ï◊†◊¶◊ô◊î...'}
                      {status === 'analyzing_content' && dynamicProgress < 85 && '◊û◊†◊™◊ó ◊™◊ï◊õ◊ü ◊û◊ß◊¶◊ï◊¢◊ô...'}
                      {status === 'analyzing_content' && dynamicProgress >= 85 && '◊û◊õ◊ô◊ü ◊ì◊ï◊ó ◊°◊ï◊§◊ô...'}
                      {status === 'completed' && '◊î◊†◊ô◊™◊ï◊ó ◊î◊ï◊©◊ú◊ù! ◊ò◊ï◊¢◊ü ◊™◊ï◊¶◊ê◊ï◊™...'}
                    </>
                  )}
                </div>
              </div>
              
              {/* ◊ê◊†◊ô◊û◊¶◊ô◊ô◊™ ◊ò◊¢◊ô◊†◊î ◊û◊¢◊ï◊¶◊ë◊™ */}
              <div className="flex justify-center items-center mb-8">
                <div className="relative">
                  <div className={`animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 ${
                    status === 'completed' ? 'border-green-500' : 'border-blue-500'
                  }`}></div>
                  <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-2xl">
                    {status === 'processing' ? 'üîÑ' :
                     status === 'transcribing' ? 'üìù' :
                     status === 'analyzing_tone' ? 'üé≠' :
                     status === 'analyzing_content' ? 'üìä' :
                     status === 'completed' ? '‚úÖ' : '‚öôÔ∏è'}
                  </div>
                </div>
              </div>
              
              {/* ◊ú◊ï◊í◊ô◊ù ◊ë◊û◊¢◊ï◊¶◊ë */}
              {callLogs.length > 0 && (
                <div className="w-full max-w-2xl mx-auto bg-gray-50 rounded-lg border border-gray-200 p-4">
                  <h3 className="text-sm font-semibold mb-3 text-gray-700 text-center">üîç ◊°◊ò◊ò◊ï◊° ◊¢◊ô◊ë◊ï◊ì ◊†◊ï◊õ◊ó◊ô</h3>
                  <div className="max-h-32 overflow-y-auto space-y-2">
                    {callLogs.slice(-4).map((log, index) => (
                      <div key={index} className="flex items-start text-sm bg-white p-2 rounded shadow-sm">
                        <span className="text-gray-500 ml-2 whitespace-nowrap text-xs">
                          {new Date(log.timestamp).toLocaleTimeString('he-IL')}
                        </span>
                        <span className="text-gray-700 flex-1">{log.message}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* ◊õ◊§◊™◊ï◊® ◊ó◊ô◊®◊ï◊ù */}
              <div className="mt-6">
                <button 
                  onClick={() => {
                    setIsPolling(false)
                    window.location.reload()
                  }}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  üîÑ ◊®◊¢◊†◊ü ◊ì◊£ ◊ï◊ò◊¢◊ü ◊†◊ô◊™◊ï◊ó
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }
  
  // ◊®◊†◊ì◊ï◊® ◊ú◊©◊ô◊ó◊î ◊©◊î◊ï◊©◊ú◊û◊î
  const analysisReport = call.analysis_report || {};
  const tone_analysis_report = call.tone_analysis_report || {};
  const analysis_report = analysisReport; // ◊†◊ï◊°◊ô◊£ alias ◊ú◊™◊ê◊ô◊û◊ï◊™
  
  // ◊§◊ï◊†◊ß◊¶◊ô◊î ◊ú◊î◊™◊û◊ï◊ì◊ì◊ï◊™ ◊¢◊ù ◊©◊û◊ï◊™ ◊©◊ì◊ï◊™ ◊ë◊§◊ï◊®◊û◊ò◊ô◊ù ◊©◊ï◊†◊ô◊ù
  const getFieldValue = (report: any, fieldNames: string[]) => {
    if (!report) return null;
    
    for (const fieldName of fieldNames) {
      if (fieldName.includes('.')) {
        const parts = fieldName.split('.');
        let value: any = report;
        for (const part of parts) {
          value = value?.[part];
          if (!value) break;
        }
        if (value) return value;
      } else if (report[fieldName] !== undefined && report[fieldName] !== null) {
        return report[fieldName];
      }
    }
    return null;
  };
  


  // ◊§◊ï◊†◊ß◊¶◊ô◊î ◊ú◊ó◊ô◊ú◊ï◊• ◊î◊†◊ô◊™◊ï◊ó ◊î◊û◊§◊ï◊®◊ò ◊î◊ó◊ì◊©
  const getDetailedScores = () => {
    const categories = [
      {
        category: '◊§◊™◊ô◊ó◊™ ◊©◊ô◊ó◊î ◊ï◊ë◊†◊ô◊ô◊™ ◊ê◊û◊ï◊ü',
        key: '◊§◊™◊ô◊ó◊™_◊©◊ô◊ó◊î_◊ï◊ë◊†◊ô◊ô◊™_◊ê◊û◊ï◊ü',
        subcategories: [
          { name: '◊§◊™◊ô◊ó ◊ê◊†◊®◊í◊ò◊ô', key: '◊§◊™◊ô◊ó_◊ê◊†◊®◊í◊ò◊ô' },
          { name: '◊î◊¶◊í◊™ ◊†◊¶◊ô◊í ◊ï◊ó◊ë◊®◊î', key: '◊î◊¶◊í◊™_◊†◊¶◊ô◊í_◊ï◊ó◊ë◊®◊î' },
          { name: '◊ë◊†◊ô◊ô◊™ ◊õ◊ô◊û◊ô◊î', key: '◊ë◊†◊ô◊ô◊™_◊õ◊ô◊û◊ô◊î' },
          { name: '◊î◊¶◊í◊™ ◊™◊ï◊¢◊ú◊™ ◊û◊î◊ô◊®◊î', key: '◊î◊¶◊í◊™_◊™◊ï◊¢◊ú◊™_◊û◊î◊ô◊®◊î' },
          { name: '◊ë◊†◊ô◊ô◊™ ◊ê◊û◊ï◊ü', key: '◊ë◊†◊ô◊ô◊™_◊ê◊û◊ï◊ü' },
          { name: '◊©◊ô◊û◊ï◊© ◊ë◊©◊ù ◊§◊®◊ò◊ô', key: '◊©◊ô◊û◊ï◊©_◊ë◊©◊ù_◊§◊®◊ò◊ô' },
          { name: '◊©◊ê◊ú◊™ ◊°◊ô◊ë◊™ ◊î◊§◊†◊ô◊ô◊î', key: '◊©◊ê◊ú◊™_◊°◊ô◊ë◊™_◊î◊§◊†◊ô◊ô◊î' }
        ]
      },
      {
        category: '◊ê◊ô◊™◊ï◊® ◊¶◊®◊õ◊ô◊ù ◊ï◊ñ◊ô◊î◊ï◊ô ◊õ◊ê◊ë',
        key: '◊ê◊ô◊™◊ï◊®_◊¶◊®◊õ◊ô◊ù_◊ï◊ñ◊ô◊î◊ï◊ô_◊õ◊ê◊ë',
        subcategories: [
          { name: '◊©◊ê◊ô◊ú◊™ ◊©◊ê◊ú◊ï◊™', key: '◊©◊ê◊ô◊ú◊™_◊©◊ê◊ú◊ï◊™' },
          { name: '◊ê◊ô◊™◊ï◊® ◊õ◊ê◊ë/◊¶◊ï◊®◊ö', key: '◊ê◊ô◊™◊ï◊®_◊õ◊ê◊ë_◊¶◊ï◊®◊ö' },
          { name: '◊ñ◊ô◊î◊ï◊ô ◊°◊í◊†◊ï◊ü ◊™◊ß◊©◊ï◊®◊™', key: '◊ñ◊ô◊î◊ï◊ô_◊°◊í◊†◊ï◊ü_◊™◊ß◊©◊ï◊®◊™' },
          { name: '◊ñ◊ô◊î◊ï◊ô ◊ê◊ô◊™◊ï◊™◊ô ◊ß◊†◊ô◊ô◊î', key: '◊ñ◊ô◊î◊ï◊ô_◊ê◊ô◊™◊ï◊™◊ô_◊ß◊†◊ô◊ô◊î' }
        ]
      },
      {
        category: '◊î◊ß◊©◊ë◊î ◊ï◊ê◊ô◊†◊ò◊®◊ê◊ß◊¶◊ô◊î',
        key: '◊î◊ß◊©◊ë◊î_◊ï◊ê◊ô◊†◊ò◊®◊ê◊ß◊¶◊ô◊î',
        subcategories: [
          { name: '◊î◊ß◊©◊ë◊î ◊§◊¢◊ô◊ú◊î', key: '◊î◊ß◊©◊ë◊î_◊§◊¢◊ô◊ú◊î' },
          { name: '◊ì◊ô◊ë◊ï◊® ◊û◊ê◊ï◊ñ◊ü', key: '◊ì◊ô◊ë◊ï◊®_◊û◊ê◊ï◊ñ◊ü' },
          { name: '◊ñ◊®◊ô◊û◊î ◊ï◊°◊ì◊®', key: '◊ñ◊®◊ô◊û◊î_◊ï◊°◊ì◊®' },
          { name: '◊î◊¶◊§◊™ ◊ô◊™◊®', key: '◊î◊¶◊§◊™_◊ô◊™◊®' }
        ]
      },
      {
        category: '◊î◊¶◊í◊™ ◊§◊™◊®◊ï◊ü ◊ï◊î◊ì◊í◊©◊™ ◊¢◊®◊ö',
        key: '◊î◊¶◊í◊™_◊§◊™◊®◊ï◊ü_◊ï◊î◊ì◊í◊©◊™_◊¢◊®◊ö',
        subcategories: [
          { name: '◊§◊™◊®◊ï◊ü ◊û◊ï◊™◊ê◊ù', key: '◊§◊™◊®◊ï◊ü_◊û◊ï◊™◊ê◊ù' },
          { name: '◊™◊ï◊¢◊ú◊ï◊™ ◊ï◊¢◊®◊õ◊ô◊ù', key: '◊™◊ï◊¢◊ú◊ï◊™_◊ï◊¢◊®◊õ◊ô◊ù' },
          { name: '◊™◊ï◊¢◊ú◊ï◊™ ◊®◊í◊©◊ô◊ï◊™', key: '◊™◊ï◊¢◊ú◊ï◊™_◊®◊í◊©◊ô◊ï◊™' },
          { name: '◊¢◊ì◊ï◊ô◊ï◊™/◊î◊ï◊õ◊ó◊ï◊™', key: '◊¢◊ì◊ï◊ô◊ï◊™_◊î◊ï◊õ◊ó◊ï◊™' },
          { name: '◊ô◊™◊®◊ï◊ü ◊¢◊ú ◊î◊û◊ó◊ô◊®', key: '◊ô◊™◊®◊ï◊ü_◊¢◊ú_◊î◊û◊ó◊ô◊®' },
          { name: '◊û◊ï◊û◊ó◊ô◊ï◊™ ◊û◊ß◊¶◊ï◊¢◊ô◊™', key: '◊û◊ï◊û◊ó◊ô◊ï◊™_◊û◊ß◊¶◊ï◊¢◊ô◊™' }
        ]
      },
      {
        category: '◊ò◊ô◊§◊ï◊ú ◊ë◊î◊™◊†◊í◊ì◊ï◊ô◊ï◊™',
        key: '◊ò◊ô◊§◊ï◊ú_◊ë◊î◊™◊†◊í◊ì◊ï◊ô◊ï◊™',
        subcategories: [
          { name: '◊ñ◊ô◊î◊ï◊ô ◊ê◊û◊™/◊™◊ô◊®◊ï◊•', key: '◊ñ◊ô◊î◊ï◊ô_◊ê◊û◊™_◊™◊ô◊®◊ï◊•' },
          { name: '◊¶◊®◊ô◊ö ◊ú◊ó◊©◊ï◊ë', key: '◊¶◊®◊ô◊ö_◊ú◊ó◊©◊ï◊ë' },
          { name: '◊ô◊ß◊® ◊ú◊ô', key: '◊ô◊ß◊®_◊ú◊ô' }
        ]
      },
      {
        category: '◊î◊†◊¢◊î ◊ú◊§◊¢◊ï◊ú◊î ◊ï◊°◊í◊ô◊®◊î',
        key: '◊î◊†◊¢◊î_◊ú◊§◊¢◊ï◊ú◊î_◊ï◊°◊í◊ô◊®◊î',
        subcategories: [
          { name: '◊î◊†◊¢◊î ◊ú◊§◊¢◊ï◊ú◊î', key: '◊î◊†◊¢◊î_◊ú◊§◊¢◊ï◊ú◊î' },
          { name: '◊°◊ô◊õ◊ï◊ù ◊ë◊®◊ï◊®', key: '◊°◊ô◊õ◊ï◊ù_◊ë◊®◊ï◊®' },
          { name: '◊°◊ô◊®◊ï◊ë ◊û◊õ◊ë◊ì', key: '◊°◊ô◊®◊ï◊ë_◊û◊õ◊ë◊ì' }
        ]
      },
      {
        category: '◊©◊§◊™ ◊™◊ß◊©◊ï◊®◊™ ◊ï◊ì◊ô◊†◊û◊ô◊ß◊î ◊ß◊ï◊ú◊ô◊™',
        key: '◊©◊§◊™_◊™◊ß◊©◊ï◊®◊™_◊ï◊ì◊ô◊†◊û◊ô◊ß◊î_◊ß◊ï◊ú◊ô◊™',
        subcategories: [
          { name: '◊ê◊ô◊†◊ò◊ï◊†◊¶◊ô◊î', key: '◊ê◊ô◊†◊ò◊ï◊†◊¶◊ô◊î' },
          { name: '◊î◊™◊ú◊î◊ë◊ï◊™/◊ê◊†◊®◊í◊ô◊î', key: '◊î◊™◊ú◊î◊ë◊ï◊™_◊ê◊†◊®◊í◊ô◊î' },
          { name: '◊©◊§◊î ◊ó◊ô◊ï◊ë◊ô◊™ ◊ï◊†◊ó◊®◊¶◊™', key: '◊©◊§◊î_◊ó◊ô◊ï◊ë◊ô◊™_◊ï◊†◊ó◊®◊¶◊™' }
        ]
      },
      {
        category: '◊°◊ô◊õ◊ï◊ù ◊©◊ô◊ó◊î',
        key: '◊°◊ô◊õ◊ï◊ù_◊©◊ô◊ó◊î',
        subcategories: [
          { name: '◊°◊ô◊õ◊ï◊ù ◊©◊ô◊ó◊î ◊ë◊®◊ï◊®', key: '◊°◊ô◊õ◊ï◊ù_◊©◊ô◊ó◊î_◊ë◊®◊ï◊®' },
          { name: '◊¶◊ô◊ì◊î ◊ú◊ì◊®◊ö', key: '◊¶◊ô◊ì◊î_◊ú◊ì◊®◊ö' }
        ]
      }
    ];

    return categories.map(category => {
      const categoryData = analysis_report[category.key] || {};
      

      
      const subcategories = category.subcategories.map(sub => {
        // ◊†◊°◊î ◊û◊§◊™◊ó◊ï◊™ ◊©◊ï◊†◊ô◊ù ◊õ◊ô ◊ô◊© ◊û◊§◊™◊ó◊ï◊™ ◊¢◊ù ◊í◊®◊©◊ô◊ô◊ù ◊û◊ï◊ñ◊®◊ô◊ù
        const possibleKeys = [
          sub.key,
          `"${sub.key}"`,
          `"\\${sub.key}"`,
          sub.key.replace(/_/g, ' ')
        ];
        
        let subData: any = {};
        for (const key of possibleKeys) {
          if (categoryData[key]) {
            subData = categoryData[key];
            break;
          }
        }
        
        return {
          name: sub.name,
          score: subData.◊¶◊ô◊ï◊ü || subData.score || 0,
          insights: subData.◊™◊ï◊ë◊†◊ï◊™ || subData.◊î◊°◊ë◊® || subData.insights || '◊ú◊ê ◊ñ◊û◊ô◊ü',
          improvements: subData.◊ê◊ô◊ö_◊û◊©◊§◊®◊ô◊ù || subData.improvements || '◊ú◊ê ◊ñ◊û◊ô◊ü'
        };
      });

      // ◊ó◊ô◊©◊ï◊ë ◊û◊û◊ï◊¶◊¢ ◊î◊ß◊ò◊í◊ï◊®◊ô◊î
      const avgScore = subcategories.length > 0 
        ? subcategories.reduce((sum, sub) => sum + sub.score, 0) / subcategories.length 
        : 0;

      return {
        category: category.category,
        score: Math.round(avgScore * 10) / 10,
        subcategories
      };
    });
  };

  // ◊§◊ï◊†◊ß◊¶◊ô◊î ◊ú◊ß◊ë◊ú◊™ ◊¶◊ë◊¢ ◊®◊ß◊¢ ◊ú◊§◊ô ◊¶◊ô◊ï◊ü
  const getScoreBg = (score: number) => {
    if (score >= 8) return 'bg-green-100 text-green-800';
    if (score >= 6) return 'bg-yellow-100 text-yellow-800';
    if (score >= 4) return 'bg-orange-100 text-orange-800';
    return 'bg-red-100 text-red-800';
  };

  // ◊§◊ï◊†◊ß◊¶◊ô◊î ◊ú◊ß◊ë◊ô◊¢◊™ ◊¶◊ë◊¢ ◊î◊¶◊ô◊ï◊ü
  const getScoreColor = (score: number) => {
    if (score >= 8) return 'text-green-600';
    if (score >= 6) return 'text-yellow-600';
    if (score >= 4) return 'text-orange-600';
    return 'text-red-600';
  };
  
  const detailed_analysis = analysisReport.detailed_analysis || {};
  const overall_score_from_report = getFieldValue(analysisReport, ['◊¶◊ô◊ï◊ü_◊õ◊ú◊ú◊ô', '◊û◊û◊ï◊¶◊¢_◊û◊©◊ï◊ß◊ú◊ú_◊õ◊ú◊ú◊ô', '◊¶◊ô◊ï◊ü ◊õ◊ú◊ú◊ô', 'overall_score', 'score_overall']) || 
                                   (detailed_analysis.overall_score || detailed_analysis.◊¶◊ô◊ï◊ü_◊õ◊ú◊ú◊ô);
  const red_flag_from_report = getFieldValue(analysisReport, ['red_flag', '◊ì◊í◊ú_◊ê◊ì◊ï◊ù']);
  const red_flags = getFieldValue(analysisReport, ['◊ì◊í◊ú◊ô◊ù ◊ê◊ì◊ï◊û◊ô◊ù', '◊ì◊í◊ú◊ô◊ù_◊ê◊ì◊ï◊û◊ô◊ù', 'red_flags']) || [];
  const improvement_points = getFieldValue(analysisReport, ['◊†◊ß◊ï◊ì◊ï◊™ ◊ú◊©◊ô◊§◊ï◊®', '◊†◊ß◊ï◊ì◊ï◊™_◊ú◊©◊ô◊§◊ï◊®', 'improvement_points', '◊î◊û◊ú◊¶◊ï◊™_◊©◊ô◊§◊ï◊®', '◊î◊û◊ú◊¶◊ï◊™_◊§◊®◊ß◊ò◊ô◊ï◊™', '◊î◊û◊ú◊¶◊ï◊™_◊ì◊ó◊ï◊§◊ï◊™_◊ë◊ô◊ï◊™◊®']) || [];
  const strengths_and_preservation_points = getFieldValue(analysisReport, ['◊†◊ß◊ï◊ì◊ï◊™ ◊ó◊ï◊ñ◊ß ◊ú◊©◊ô◊û◊ï◊®', '◊†◊ß◊ï◊ì◊ï◊™_◊ó◊ï◊ñ◊ß', 'strengths_and_preservation_points', 'strengths', '◊ó◊ï◊ñ◊ß◊ï◊™', '◊†◊ß◊ï◊ì◊ï◊™_◊ó◊ï◊ñ◊ß◊î']) || [];
  
  // ◊û◊©◊™◊†◊ô◊ù ◊†◊ï◊°◊§◊ô◊ù ◊©◊î◊ß◊ï◊û◊§◊ï◊†◊†◊ò◊î ◊û◊ó◊§◊©◊™
  const all_quotes = getFieldValue(analysisReport, ['◊¶◊ô◊ò◊ï◊ò◊ô◊ù_◊®◊ú◊ï◊ï◊†◊ò◊ô◊ô◊ù', '◊¶◊ô◊ò◊ï◊ò◊ô◊ù', 'quotes', 'all_quotes']) || [];
  const segment_quotes = all_quotes; // alias
  

  const practical_recommendations = getFieldValue(analysisReport, ['◊î◊û◊ú◊¶◊ï◊™_◊§◊®◊ß◊ò◊ô◊ï◊™', 'practical_recommendations']) || [];
  const detailed_scores = getDetailedScores();
  const finalOverallScore = overall_score_from_report || call.overall_score || 0;
  const finalRedFlag = red_flag_from_report || call.red_flag || false;
  
  // ◊î◊¶◊í◊™ ◊†◊ô◊™◊ï◊ó ◊û◊§◊ï◊®◊ò ◊ë◊°◊í◊†◊ï◊ü ◊ò◊ë◊ú◊ê◊ô
  const renderDetailedParameter = (param: any, name: string) => {
    if (!param || typeof param !== 'object') return null;
    
    const score = param.◊¶◊ô◊ï◊ü;
    const insights = param.◊™◊ï◊ë◊†◊ï◊™ || '';
    const improvements = param.◊ê◊ô◊ö_◊û◊©◊§◊®◊ô◊ù || '';
    
    return (
      <tr key={name} className="hover:bg-gray-50">
        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
          {name.replace(/_/g, ' ')}
        </td>
        <td className="px-6 py-4 whitespace-nowrap text-center">
          <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-bold ${getScoreBg(score)}`}>
                                  {score}/10
          </span>
        </td>
        <td className="px-6 py-4 text-sm text-gray-700">
          {insights}
        </td>
        <td className="px-6 py-4 text-sm text-gray-700">
          {improvements}
        </td>
      </tr>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4 rtl:space-x-reverse">
              <div className={`flex items-center justify-center w-12 h-12 rounded-full ${getScoreBg(finalOverallScore)}`}>
                <span className={`text-xl font-bold ${getScoreColor(finalOverallScore)}`}>
                  {finalOverallScore}
                </span>
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">◊†◊ô◊™◊ï◊ó ◊©◊ô◊ó◊î ◊û◊ß◊¶◊ï◊¢◊ô - {call.call_type}</h1>
                <div className="flex items-center space-x-4 rtl:space-x-reverse text-sm text-gray-600">
                  <span>üìÖ {new Date(call.created_at).toLocaleDateString('he-IL')}</span>
                  <span>üë§ {call.users?.full_name || call.users?.email}</span>
                  {call.companies?.name && <span>üè¢ {call.companies.name}</span>}
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-3 rtl:space-x-reverse">
              {finalRedFlag && (
                <div className="flex items-center px-3 py-1 bg-red-100 text-red-800 rounded-full text-sm font-medium red-flag-pulse">
                  üö® ◊ì◊í◊ú ◊ê◊ì◊ï◊ù
                </div>
              )}
              {/* ◊õ◊§◊™◊ï◊® ◊©◊ê◊ú◊ï◊ü ◊ó◊ë◊®◊î ◊ú◊û◊†◊î◊ú◊ô◊ù */}
              {userRole === 'manager' && (
                <a
                  href="/company-questionnaire"
                  className="flex items-center px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg font-medium transition-colors shadow-md"
                  title="◊¢◊®◊ô◊õ◊™ ◊©◊ê◊ú◊ï◊ü ◊î◊ó◊ë◊®◊î"
                >
                  <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                  </svg>
                  ◊©◊ê◊ú◊ï◊ü ◊ó◊ë◊®◊î
                </a>
              )}
              <CallStatusBadge status={status} />
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-6 py-8">
        {/* Navigation Tabs */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <nav className="flex flex-wrap gap-4">
            {['summary', 'tone', 'content', 'quotes', ...(userRole === 'admin' ? ['transcript'] : [])].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`py-3 px-6 rounded-lg font-medium transition-all duration-200 ${
                  activeTab === tab
                    ? 'bg-blue-600 text-white shadow-lg hover:bg-blue-700'
                    : 'text-gray-600 bg-gray-50 hover:text-blue-600 hover:bg-blue-50'
                }`}
              >
                {tab === 'summary' ? 'üìä ◊°◊ô◊õ◊ï◊ù ◊õ◊ú◊ú◊ô' :
                 tab === 'tone' ? 'üé≠ ◊†◊ô◊™◊ï◊ó ◊ò◊ï◊†◊¶◊ô◊î' :
                 tab === 'content' ? 'üìù ◊†◊ô◊™◊ï◊ó ◊û◊§◊ï◊®◊ò' :
                 tab === 'quotes' ? 'üí¨ ◊¶◊ô◊ò◊ï◊ò◊ô◊ù' :
                 'üìÑ ◊™◊û◊ú◊ô◊ú'}
              </button>
            ))}
          </nav>
        </div>

        {/* Tab Content */}
        {activeTab === 'summary' && (
          <div className="space-y-6">
            {/* ◊°◊ô◊õ◊ï◊ù ◊õ◊ú◊ú◊ô */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* ◊¶◊ô◊ï◊ü ◊õ◊ú◊ú◊ô */}
              <div className="lg:col-span-1">
                <div className="bg-white rounded-xl shadow-lg p-6 text-center smooth-appear">
                  <h3 className="text-lg font-semibold mb-4 text-gray-800">◊¶◊ô◊ï◊ü ◊õ◊ú◊ú◊ô</h3>
                  <div className={`text-6xl font-bold mb-4 score-animation ${getScoreColor(finalOverallScore)}`}>
                    {finalOverallScore}
                  </div>
                  <div className="text-gray-600">◊û◊™◊ï◊ö 10</div>
                  <div className={`mt-4 p-3 rounded-lg ${getScoreBg(finalOverallScore)}`}>
                    <span className={`text-sm font-medium ${getScoreColor(finalOverallScore)}`}>
                      {finalOverallScore >= 8 ? '◊ë◊ô◊¶◊ï◊¢◊ô◊ù ◊û◊¢◊ï◊ú◊ô◊ù!' :
                       finalOverallScore >= 6 ? '◊ë◊ô◊¶◊ï◊¢◊ô◊ù ◊°◊ë◊ô◊®◊ô◊ù - ◊ô◊© ◊û◊ß◊ï◊ù ◊ú◊©◊ô◊§◊ï◊®' :
                       finalOverallScore >= 4 ? '◊ì◊®◊ï◊© ◊©◊ô◊§◊ï◊® ◊û◊©◊û◊¢◊ï◊™◊ô' :
                       '◊ë◊ô◊¶◊ï◊¢◊ô◊ù ◊û◊™◊ó◊™ ◊ú◊°◊ò◊†◊ì◊®◊ò'}
                    </span>
                    {finalOverallScore < 8 && (
                      <div className="mt-2 text-xs text-gray-600">
                        üí° <strong>◊ñ◊õ◊ï◊®:</strong> ◊î◊°◊ò◊†◊ì◊®◊ò◊ô◊ù ◊©◊ú◊†◊ï ◊í◊ë◊ï◊î◊ô◊ù - ◊®◊ß 8+ ◊†◊ó◊©◊ë ◊û◊¢◊ï◊ú◊î
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* ◊†◊™◊ï◊†◊ô ◊©◊ô◊ó◊î */}
              <div className="lg:col-span-2">
                <div className="bg-white rounded-xl shadow-lg p-6 smooth-appear">
                  <h3 className="text-lg font-semibold mb-4 text-gray-800">◊§◊®◊ò◊ô ◊î◊©◊ô◊ó◊î</h3>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="bg-blue-50 p-4 rounded-lg card-hover">
                      <div className="text-sm text-blue-600 font-medium">◊°◊ï◊í ◊†◊ô◊™◊ï◊ó</div>
                      <div className="text-lg font-semibold text-blue-800">
                        {call.analysis_type === 'full' ? '◊†◊ô◊™◊ï◊ó ◊û◊ú◊ê' : '◊†◊ô◊™◊ï◊ó ◊ò◊ï◊†◊¶◊ô◊î'}
                      </div>
                    </div>
                    <div className="bg-green-50 p-4 rounded-lg card-hover">
                      <div className="text-sm text-green-600 font-medium">◊û◊©◊ö ◊î◊©◊ô◊ó◊î</div>
                      <div className="text-lg font-semibold text-green-800">
                        {call.audio_duration_seconds ? formatTime(call.audio_duration_seconds) : '◊ú◊ê ◊ñ◊û◊ô◊ü'}
                      </div>
                    </div>
                    <div className="bg-purple-50 p-4 rounded-lg card-hover">
                      <div className="text-sm text-purple-600 font-medium">◊™◊ê◊®◊ô◊ö ◊†◊ô◊™◊ï◊ó</div>
                      <div className="text-lg font-semibold text-purple-800">
                        {call.analyzed_at ? new Date(call.analyzed_at).toLocaleDateString('he-IL') : '◊ò◊®◊ù ◊†◊ï◊™◊ó'}
                      </div>
                    </div>
                    <div className="bg-orange-50 p-4 rounded-lg card-hover">
                      <div className="text-sm text-orange-600 font-medium">◊°◊ò◊ò◊ï◊°</div>
                      <div className="text-lg font-semibold text-orange-800">
                        {status === 'completed' ? '◊î◊ï◊©◊ú◊ù' : status}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* ◊î◊°◊ë◊® ◊¢◊ú ◊î◊§◊®◊û◊ò◊®◊ô◊ù */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
              <div className="flex items-center mb-4">
                <span className="text-blue-500 text-2xl mr-3">üìä</span>
                <h3 className="text-xl font-semibold text-blue-800">8 ◊ß◊ò◊í◊ï◊®◊ô◊ï◊™ ◊†◊ô◊™◊ï◊ó ◊û◊ß◊¶◊ï◊¢◊ô◊ï◊™</h3>
              </div>
              <p className="text-blue-700 mb-4">
                ◊î◊©◊ô◊ó◊î ◊†◊ï◊™◊ó◊î ◊ú◊§◊ô 8 ◊ß◊ò◊í◊ï◊®◊ô◊ï◊™ ◊û◊ß◊¶◊ï◊¢◊ô◊ï◊™ ◊î◊û◊õ◊ô◊ú◊ï◊™ 32 ◊§◊®◊û◊ò◊®◊ô◊ù ◊û◊§◊ï◊®◊ò◊ô◊ù:
              </p>
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 text-sm">
                <div className="bg-white p-3 rounded border border-blue-200">
                  <div className="font-medium text-blue-800">1. ◊§◊™◊ô◊ó◊™ ◊©◊ô◊ó◊î ◊ï◊ë◊†◊ô◊ô◊™ ◊ê◊û◊ï◊ü</div>
                  <div className="text-blue-600 text-xs">7 ◊§◊®◊û◊ò◊®◊ô◊ù</div>
                </div>
                <div className="bg-white p-3 rounded border border-blue-200">
                  <div className="font-medium text-blue-800">2. ◊ê◊ô◊™◊ï◊® ◊¶◊®◊õ◊ô◊ù ◊ï◊ñ◊ô◊î◊ï◊ô ◊õ◊ê◊ë</div>
                  <div className="text-blue-600 text-xs">4 ◊§◊®◊û◊ò◊®◊ô◊ù</div>
                </div>
                <div className="bg-white p-3 rounded border border-blue-200">
                  <div className="font-medium text-blue-800">3. ◊î◊ß◊©◊ë◊î ◊ï◊ê◊ô◊†◊ò◊®◊ê◊ß◊¶◊ô◊î</div>
                  <div className="text-blue-600 text-xs">4 ◊§◊®◊û◊ò◊®◊ô◊ù</div>
                </div>
                <div className="bg-white p-3 rounded border border-blue-200">
                  <div className="font-medium text-blue-800">4. ◊î◊¶◊í◊™ ◊§◊™◊®◊ï◊ü ◊ï◊î◊ì◊í◊©◊™ ◊¢◊®◊ö</div>
                  <div className="text-blue-600 text-xs">6 ◊§◊®◊û◊ò◊®◊ô◊ù</div>
                </div>
                <div className="bg-white p-3 rounded border border-blue-200">
                  <div className="font-medium text-blue-800">5. ◊ò◊ô◊§◊ï◊ú ◊ë◊î◊™◊†◊í◊ì◊ï◊ô◊ï◊™</div>
                  <div className="text-blue-600 text-xs">3 ◊§◊®◊û◊ò◊®◊ô◊ù</div>
                </div>
                <div className="bg-white p-3 rounded border border-blue-200">
                  <div className="font-medium text-blue-800">6. ◊î◊†◊¢◊î ◊ú◊§◊¢◊ï◊ú◊î ◊ï◊°◊í◊ô◊®◊î</div>
                  <div className="text-blue-600 text-xs">3 ◊§◊®◊û◊ò◊®◊ô◊ù</div>
                </div>
                <div className="bg-white p-3 rounded border border-blue-200">
                  <div className="font-medium text-blue-800">7. ◊©◊§◊™ ◊™◊ß◊©◊ï◊®◊™ ◊ï◊ì◊ô◊†◊û◊ô◊ß◊î ◊ß◊ï◊ú◊ô◊™</div>
                  <div className="text-blue-600 text-xs">3 ◊§◊®◊û◊ò◊®◊ô◊ù</div>
                </div>
                <div className="bg-white p-3 rounded border border-blue-200">
                  <div className="font-medium text-blue-800">8. ◊°◊ô◊õ◊ï◊ù ◊©◊ô◊ó◊î</div>
                  <div className="text-blue-600 text-xs">2 ◊§◊®◊û◊ò◊®◊ô◊ù</div>
                </div>
              </div>
              <div className="mt-4 text-center">
                <span className="text-blue-700 text-sm font-medium">
                  üí° ◊ú◊¶◊§◊ô◊ô◊î ◊ë◊§◊ô◊®◊ï◊ò ◊î◊û◊ú◊ê ◊©◊ú ◊õ◊ú ◊§◊®◊û◊ò◊® ◊¢◊ë◊ï◊® ◊ú◊ò◊ê◊ë "◊™◊ï◊õ◊ü"
                </span>
              </div>
            </div>

            {/* ◊¶◊ô◊ï◊†◊ô◊ù ◊û◊§◊ï◊®◊ò◊ô◊ù */}
            {detailed_scores && detailed_scores.length > 0 && (
              <div className="space-y-6">
                {detailed_scores.map((categoryData, idx) => {
                  const scoreValue = categoryData.score || 0;
                  const displayCategory = categoryData.category;
                  
                  // ◊ó◊ô◊§◊ï◊© ◊¶◊ô◊ò◊ï◊ò◊ô◊ù ◊®◊ú◊ï◊ï◊†◊ò◊ô◊ô◊ù ◊ú◊ß◊ò◊í◊ï◊®◊ô◊î ◊ñ◊ï
                  let relevantQuotes = segment_quotes ? segment_quotes.filter((quote: any) => {
                    if (!quote || typeof quote !== 'object') return false;
                    const quoteCategory = quote.category || quote.◊ß◊ò◊í◊ï◊®◊ô◊î || quote.title || '';
                    return quoteCategory.toLowerCase().includes(displayCategory.toLowerCase()) || 
                           displayCategory.toLowerCase().includes(quoteCategory.toLowerCase());
                  }) : [];

                  return (
                    <div key={idx} className="bg-white rounded-xl shadow-lg p-6 border-l-4" 
                         style={{ borderLeftColor: scoreValue >= 8 ? '#10b981' : scoreValue >= 6 ? '#f59e0b' : '#ef4444' }}>
                      
                      {/* ◊õ◊ï◊™◊®◊™ ◊î◊§◊®◊û◊ò◊® ◊¢◊ù ◊¶◊ô◊ï◊ü */}
                      <div className="flex justify-between items-start mb-4">
                        <h3 className="text-xl font-semibold text-gray-800">{displayCategory}</h3>
                        <div className="text-left">
                          <span className={`text-3xl font-bold ${getScoreColor(scoreValue)}`}>
                            {scoreValue}
                          </span>
                          <span className="text-gray-500 text-sm">/10</span>
                        </div>
                      </div>

                      {/* ◊û◊ì ◊î◊™◊ß◊ì◊û◊ï◊™ */}
                      <div className="w-full bg-gray-200 rounded-full h-3 mb-4">
                        <div 
                          className={`h-3 rounded-full transition-all duration-300 ${
                            scoreValue >= 8 ? 'bg-green-500' :
                            scoreValue >= 6 ? 'bg-orange-500' : 'bg-red-500'
                          }`}
                          style={{ width: `${(scoreValue / 10) * 100}%` }}
                        />
                      </div>

                      {/* ◊î◊¢◊®◊ï◊™ ◊ï◊î◊¢◊®◊õ◊î - ◊ë◊¶◊ï◊®◊™ ◊ß◊¶◊®◊î ◊ê◊ë◊ú ◊©◊ô◊û◊ï◊©◊ô◊™ */}
                      {categoryData.subcategories && categoryData.subcategories.length > 0 && (
                        <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                          <h4 className="font-medium text-gray-700 mb-2">üìù ◊°◊ô◊õ◊ï◊ù ◊û◊î◊ô◊®:</h4>
                          <p className="text-gray-700 leading-relaxed text-sm">
                            {categoryData.subcategories.length} ◊§◊®◊û◊ò◊®◊ô◊ù ◊ë◊ß◊ò◊í◊ï◊®◊ô◊î ◊ñ◊ï - 
                            ◊¶◊ô◊ï◊ü ◊û◊û◊ï◊¶◊¢: <span className="font-bold">{scoreValue}/10</span>
                          </p>
                        </div>
                      )}

                      {/* ◊¶◊ô◊ò◊ï◊ò◊ô◊ù ◊®◊ú◊ï◊ï◊†◊ò◊ô◊ô◊ù ◊ú◊ß◊ò◊í◊ï◊®◊ô◊î */}
                      {relevantQuotes.length > 0 && (
                        <div className="space-y-3">
                          <h4 className="font-medium text-gray-700 flex items-center">
                            <span className="mr-2">üí¨</span>
                            ◊¶◊ô◊ò◊ï◊ò◊ô◊ù ◊®◊ú◊ï◊ï◊†◊ò◊ô◊ô◊ù ({relevantQuotes.length}):
                          </h4>
                          {relevantQuotes.map((quote: any, quoteIdx: number) => {
                            const quoteText = quote.text || quote.quote || quote.◊¶◊ô◊ò◊ï◊ò || quote.content || '';
                            const comment = quote.comment || quote.◊î◊¢◊®◊î || '';
                            
                            // ◊ó◊ô◊§◊ï◊© timestamp - ◊ß◊ï◊ì◊ù ◊û◊î◊ì◊ï◊ó, ◊ê◊ó◊® ◊õ◊ö ◊û◊î◊§◊ï◊†◊ß◊¶◊ô◊î ◊î◊ó◊õ◊û◊î
                            let timestampSeconds = quote.timestamp_seconds;
                            
                            // ◊ò◊ô◊§◊ï◊ú ◊ë◊§◊ï◊®◊û◊ò ◊î◊ó◊ì◊© ◊©◊ú timestamp
                            if (!timestampSeconds && quote.timestamp) {
                              const timestamp = quote.timestamp;
                              if (timestamp && timestamp.includes(':')) {
                                const parts = timestamp.split('-')[0].split(':'); // ◊ú◊ï◊ß◊ó◊ô◊ù ◊ê◊™ ◊î◊ó◊ú◊ß ◊î◊®◊ê◊©◊ï◊ü ◊©◊ú ◊î◊ò◊ï◊ï◊ó
                                if (parts.length === 2) {
                                  timestampSeconds = parseInt(parts[0]) * 60 + parseInt(parts[1]);
                                }
                              }
                            }
                            
                            if (!timestampSeconds && quoteText) {
                              timestampSeconds = findTimestampForQuote(quoteText);
                            }
                            
                            const isCurrentlyPlaying = isQuotePlaying(quoteText);
                            
                            return (
                              <div 
                                key={quoteIdx} 
                                className={`transition-all duration-300 border rounded-lg p-3 ${
                                  isCurrentlyPlaying 
                                    ? 'bg-blue-100 border-blue-400 shadow-lg ring-2 ring-blue-300' 
                                    : 'bg-blue-50 border-blue-200 hover:bg-blue-100'
                                }`}
                              >
                                <div className="flex justify-between items-start">
                                  <div className="flex-1">
                                    <p className={`italic mb-2 transition-colors ${
                                      isCurrentlyPlaying ? 'text-blue-800 font-medium' : 'text-gray-700'
                                    }`}>
                                      "{quoteText}"
                                    </p>
                                    {comment && (
                                      <p className="text-sm text-blue-700">
                                        üí≠ {comment}
                                      </p>
                                    )}
                                  </div>
                                  
                                  <div className="flex items-center space-x-2 rtl:space-x-reverse mr-3">
                                    {timestampSeconds !== undefined && timestampSeconds !== null && audioUrl && (
                                      <>
                                        {isCurrentlyPlaying ? (
                                          <button 
                                            onClick={stopQuote}
                                            className="flex items-center px-2 py-1 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-xs font-medium"
                                            title="◊¢◊¶◊ï◊® ◊î◊©◊û◊¢◊î"
                                          >
                                            <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clipRule="evenodd" />
                                            </svg>
                                            ◊¢◊¶◊ï◊®
                                          </button>
                                        ) : (
                                          <button 
                                            onClick={() => playQuote(timestampSeconds, quoteText)}
                                            className="flex items-center px-2 py-1 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors text-xs font-medium"
                                            title="◊î◊©◊û◊¢ ◊ê◊™ ◊î◊¶◊ô◊ò◊ï◊ò ◊ë◊ê◊ï◊ì◊ô◊ï"
                                          >
                                            <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd" />
                                            </svg>
                                            {formatTime(timestampSeconds)}
                                          </button>
                                        )}
                                      </>
                                    )}
                                  </div>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            )}

            {/* ◊†◊í◊ü ◊ê◊ï◊ì◊ô◊ï */}
            {audioUrl && (
              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-800">üéß ◊î◊ß◊ú◊ò◊™ ◊î◊©◊ô◊ó◊î</h3>
                  {currentPlayingQuote && (
                    <div className="flex items-center space-x-3 rtl:space-x-reverse">
                      <div className="flex items-center text-blue-600 bg-blue-50 px-3 py-2 rounded-lg border border-blue-200">
                        <svg className="w-4 h-4 mr-2 animate-pulse" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.617.817L4.906 14H2a1 1 0 01-1-1V7a1 1 0 011-1h2.906l3.477-2.817z" clipRule="evenodd"/>
                          <path fillRule="evenodd" d="M12.146 6.146a.5.5 0 01.708 0 4 4 0 010 5.708.5.5 0 01-.708-.708 3 3 0 000-4.292.5.5 0 010-.708z" clipRule="evenodd"/>
                        </svg>
                        <div className="text-sm">
                          <div className="font-medium">◊û◊†◊í◊ü ◊¶◊ô◊ò◊ï◊ò:</div>
                          <div className="text-xs text-blue-700 max-w-xs truncate">
                            "{currentPlayingQuote.substring(0, 50)}{currentPlayingQuote.length > 50 ? '...' : ''}"
                          </div>
                        </div>
                      </div>
                      <button 
                        onClick={stopQuote}
                        className="flex items-center px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm font-medium"
                        title="◊¢◊¶◊ï◊® ◊î◊©◊û◊¢◊™ ◊î◊¶◊ô◊ò◊ï◊ò"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clipRule="evenodd" />
                        </svg>
                        ◊¢◊¶◊ï◊® ◊¶◊ô◊ò◊ï◊ò
                      </button>
                    </div>
                  )}
                </div>
                
                <audio 
                  ref={audioRef}
                  controls 
                  className="w-full h-12 bg-gray-100 rounded-lg"
                  onPlay={() => setIsPlaying(true)}
                  onPause={() => setIsPlaying(false)}
                >
                  <source src={audioUrl} />
                  ◊î◊ì◊§◊ì◊§◊ü ◊©◊ú◊ö ◊ê◊ô◊†◊ï ◊™◊ï◊û◊ö ◊ë◊†◊í◊ü ◊î◊ê◊ï◊ì◊ô◊ï.
                </audio>
                
                {currentPlayingQuote && (
                  <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <div className="flex items-start space-x-2 rtl:space-x-reverse">
                      <svg className="w-5 h-5 text-blue-600 mt-0.5 animate-pulse" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clipRule="evenodd"/>
                      </svg>
                      <div className="flex-1">
                        <p className="text-sm font-medium text-blue-800 mb-1">◊¶◊ô◊ò◊ï◊ò ◊©◊û◊†◊í◊ü ◊õ◊¢◊™:</p>
                        <p className="text-sm text-blue-700 italic">"{currentPlayingQuote}"</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* ◊î◊¢◊®◊ï◊™/◊ì◊í◊©◊ô◊ù ◊û◊ô◊ï◊ó◊ì◊ô◊ù ◊ú◊†◊ô◊™◊ï◊ó */}
            {call.analysis_notes && (
              <div className="bg-orange-50 border border-orange-200 rounded-xl shadow-lg p-6">
                <h3 className="text-lg font-semibold mb-4 text-orange-800 flex items-center">
                  <span className="mr-2">üìã</span>
                  ◊î◊¢◊®◊ï◊™/◊ì◊í◊©◊ô◊ù ◊û◊ô◊ï◊ó◊ì◊ô◊ù ◊©◊î◊™◊ë◊ß◊©◊ï ◊ú◊†◊ô◊™◊ï◊ó
                </h3>
                <div className="bg-white p-4 rounded-lg border border-orange-100">
                  <p className="text-gray-700 leading-relaxed">{call.analysis_notes}</p>
                </div>
                <p className="text-sm text-orange-600 mt-3 italic">
                  üîç ◊î◊§◊®◊û◊ò◊®◊ô◊ù ◊î◊ú◊ú◊ï ◊î◊ï◊¢◊ë◊®◊ï ◊ú◊û◊¢◊®◊õ◊™ ◊î◊†◊ô◊™◊ï◊ó ◊ï◊î◊©◊§◊ô◊¢◊ï ◊¢◊ú ◊î◊™◊ï◊¶◊ê◊ï◊™ ◊î◊û◊ï◊¶◊í◊ï◊™
                </p>
              </div>
            )}
          </div>
        )}

        {activeTab === 'tone' && (
          <div className="space-y-6">
            {/* ◊†◊ô◊™◊ï◊ó ◊ò◊ï◊†◊¶◊ô◊î */}
            {tone_analysis_report && Object.keys(tone_analysis_report).length > 0 && (
              <>
                {/* ◊¶◊ô◊ï◊ü ◊ò◊ï◊†◊¶◊ô◊î */}
                {getFieldValue(tone_analysis_report, ['◊¶◊ô◊ï◊ü_◊ò◊ï◊†◊¶◊ô◊î']) && (
                  <div className="bg-white rounded-xl shadow-lg p-6 text-center">
                    <h3 className="text-xl font-semibold mb-4 text-gray-800">◊¶◊ô◊ï◊ü ◊ò◊ï◊†◊¶◊ô◊î ◊õ◊ú◊ú◊ô</h3>
                    <div className="text-5xl font-bold text-blue-600 mb-2">
                      {getFieldValue(tone_analysis_report, ['◊¶◊ô◊ï◊ü_◊ò◊ï◊†◊¶◊ô◊î'])}
                    </div>
                    <div className="text-gray-600">◊û◊™◊ï◊ö 10</div>
                  </div>
                )}

                {/* ◊û◊ê◊§◊ô◊ô◊†◊ô ◊ò◊ï◊†◊¶◊ô◊î */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  {getFieldValue(tone_analysis_report, ['◊ò◊ï◊ü_◊õ◊ú◊ú◊ô', '◊ò◊ï◊ü', 'overall_tone_assessment']) && (
                    <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-blue-500">
                      <h4 className="font-semibold text-blue-800 mb-2">üé≠ ◊ò◊ï◊ü ◊õ◊ú◊ú◊ô</h4>
                      <p className="text-gray-700">{String(getFieldValue(tone_analysis_report, ['◊ò◊ï◊ü_◊õ◊ú◊ú◊ô', '◊ò◊ï◊ü', 'overall_tone_assessment']))}</p>
                    </div>
                  )}
                  
                  {getFieldValue(tone_analysis_report, ['◊®◊û◊™_◊ê◊†◊®◊í◊ô◊î', '◊®◊û◊™ ◊ê◊†◊®◊í◊ô◊î', 'energy_level']) && (
                    <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-green-500">
                      <h4 className="font-semibold text-green-800 mb-2">‚ö° ◊®◊û◊™ ◊ê◊†◊®◊í◊ô◊î</h4>
                      <p className="text-gray-700">{String(getFieldValue(tone_analysis_report, ['◊®◊û◊™_◊ê◊†◊®◊í◊ô◊î', '◊®◊û◊™ ◊ê◊†◊®◊í◊ô◊î', 'energy_level']))}</p>
                    </div>
                  )}
                  
                  {getFieldValue(tone_analysis_report, ['◊û◊ß◊¶◊ï◊¢◊ô◊ï◊™', 'professionalism']) && (
                    <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-purple-500">
                      <h4 className="font-semibold text-purple-800 mb-2">üíº ◊û◊ß◊¶◊ï◊¢◊ô◊ï◊™</h4>
                      <p className="text-gray-700">{String(getFieldValue(tone_analysis_report, ['◊û◊ß◊¶◊ï◊¢◊ô◊ï◊™', 'professionalism']))}</p>
                    </div>
                  )}
                  
                  {getFieldValue(tone_analysis_report, ['◊ó◊ô◊ï◊ë◊ô◊ï◊™', 'positivity']) && (
                    <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-yellow-500">
                      <h4 className="font-semibold text-yellow-800 mb-2">üòä ◊ó◊ô◊ï◊ë◊ô◊ï◊™</h4>
                      <p className="text-gray-700">{String(getFieldValue(tone_analysis_report, ['◊ó◊ô◊ï◊ë◊ô◊ï◊™', 'positivity']))}</p>
                    </div>
                  )}
                </div>

                {/* ◊ì◊í◊ú◊ô◊ù ◊ê◊ì◊ï◊û◊ô◊ù ◊ò◊ï◊†◊ê◊ú◊ô◊ô◊ù */}
                {getFieldValue(tone_analysis_report, ['◊ì◊í◊ú◊ô◊ù_◊ê◊ì◊ï◊û◊ô◊ù', '◊ì◊í◊ú◊ô◊ù ◊ê◊ì◊ï◊û◊ô◊ù', 'red_flags']) && (
                  <div className="bg-white rounded-xl shadow-lg p-6">
                    <h3 className="text-xl font-semibold mb-4 text-red-700">üö® ◊ì◊í◊ú◊ô◊ù ◊ê◊ì◊ï◊û◊ô◊ù ◊ò◊ï◊†◊ê◊ú◊ô◊ô◊ù</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {Object.entries(getFieldValue(tone_analysis_report, ['◊ì◊í◊ú◊ô◊ù_◊ê◊ì◊ï◊û◊ô◊ù', '◊ì◊í◊ú◊ô◊ù ◊ê◊ì◊ï◊û◊ô◊ù', 'red_flags']))
                        .map(([key, value]) => (
                          <div key={key} className={`p-4 rounded-lg border-2 ${
                            value === true || value === 'true' || (typeof value === 'string' && value.includes('◊ñ◊ï◊î◊î'))
                              ? 'bg-red-50 border-red-200' 
                              : 'bg-green-50 border-green-200'
                          }`}>
                            <div className="flex items-center justify-between mb-2">
                              <h4 className="font-medium">{key.replace(/_/g, ' ')}</h4>
                              <span className="text-2xl">
                                {value === true || value === 'true' || (typeof value === 'string' && value.includes('◊ñ◊ï◊î◊î')) ? '‚ùå' : '‚úÖ'}
                              </span>
                            </div>
                            <p className={`text-sm ${
                              value === true || value === 'true' || (typeof value === 'string' && value.includes('◊ñ◊ï◊î◊î'))
                                ? 'text-red-700' 
                                : 'text-green-700'
                            }`}>
                              {typeof value === 'boolean' 
                                ? (value ? '◊ñ◊ï◊î◊î' : '◊ú◊ê ◊ñ◊ï◊î◊î')
                                : String(value)}
                            </p>
                          </div>
                        ))}
                    </div>
                  </div>
                )}

                {/* ◊†◊ô◊™◊ï◊ó ◊§◊®◊ï◊ñ◊ï◊ì◊ô */}
                {getFieldValue(tone_analysis_report, ['◊†◊ô◊™◊ï◊ó_◊§◊®◊ï◊ñ◊ï◊ì◊ô', '◊°◊ô◊õ◊ï◊ù ◊§◊®◊ï◊ñ◊ï◊ì◊ô', 'prosodic_summary']) && (
                  <div className="bg-white rounded-xl shadow-lg p-6">
                    <h3 className="text-xl font-semibold mb-4 text-gray-800">üéµ ◊†◊ô◊™◊ï◊ó ◊§◊®◊ï◊ñ◊ï◊ì◊ô ◊û◊§◊ï◊®◊ò</h3>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <p className="text-gray-700 leading-relaxed">
                        {String(getFieldValue(tone_analysis_report, ['◊†◊ô◊™◊ï◊ó_◊§◊®◊ï◊ñ◊ï◊ì◊ô', '◊°◊ô◊õ◊ï◊ù ◊§◊®◊ï◊ñ◊ï◊ì◊ô', 'prosodic_summary']))}
                      </p>
                    </div>
                  </div>
                )}
              </>
            )}
          </div>
        )}

        {activeTab === 'content' && call.analysis_type === 'full' && (
          <div className="space-y-6">
            {/* ◊î◊¢◊®◊î ◊¢◊ú ◊î◊†◊ô◊™◊ï◊ó ◊î◊û◊ß◊¶◊ï◊¢◊ô */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-center">
                <span className="text-blue-500 text-lg mr-2">üí°</span>
                <p className="text-blue-800 text-sm">
                  <strong>◊†◊ô◊™◊ï◊ó ◊û◊ß◊¶◊ï◊¢◊ô ◊û◊§◊ï◊®◊ò:</strong> 32 ◊§◊®◊û◊ò◊®◊ô◊ù ◊û◊ß◊¶◊ï◊¢◊ô◊ô◊ù ◊ë◊°◊í◊†◊ï◊ü ◊ò◊ë◊ú◊ê◊ô ◊¢◊ù ◊¶◊ô◊ï◊†◊ô◊ù, ◊™◊ï◊ë◊†◊ï◊™ ◊ï◊î◊û◊ú◊¶◊ï◊™ ◊ú◊©◊ô◊§◊ï◊®
                </p>
              </div>
            </div>



            {/* ◊†◊ß◊ï◊ì◊ï◊™ ◊õ◊©◊ú ◊û◊®◊õ◊ñ◊ô◊ï◊™ */}
            {analysis_report.◊†◊ß◊ï◊ì◊ï◊™_◊õ◊©◊ú_◊û◊®◊õ◊ñ◊ô◊ï◊™ && analysis_report.◊†◊ß◊ï◊ì◊ï◊™_◊õ◊©◊ú_◊û◊®◊õ◊ñ◊ô◊ï◊™.length > 0 && (
              <div className="bg-red-50 border border-red-200 rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-semibold mb-4 text-red-700 flex items-center">
                  <span className="mr-2">üö®</span>
                  ◊†◊ß◊ï◊ì◊ï◊™ ◊õ◊©◊ú ◊û◊®◊õ◊ñ◊ô◊ï◊™
                </h3>
                <ul className="space-y-2">
                  {analysis_report.◊†◊ß◊ï◊ì◊ï◊™_◊õ◊©◊ú_◊û◊®◊õ◊ñ◊ô◊ï◊™.map((item: string, index: number) => (
                    <li key={index} className="flex items-start">
                      <span className="text-red-500 mr-2">‚Ä¢</span>
                      <span className="text-red-700">{item}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {/* ◊†◊ß◊ï◊ì◊ï◊™ ◊ó◊ï◊ñ◊ß */}
            {analysis_report.◊†◊ß◊ï◊ì◊ï◊™_◊ó◊ï◊ñ◊ß◊î && analysis_report.◊†◊ß◊ï◊ì◊ï◊™_◊ó◊ï◊ñ◊ß◊î.length > 0 && (
              <div className="bg-green-50 border border-green-200 rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-semibold mb-4 text-green-700 flex items-center">
                  <span className="mr-2">‚úÖ</span>
                  ◊†◊ß◊ï◊ì◊ï◊™ ◊ó◊ï◊ñ◊ß
                </h3>
                <ul className="space-y-2">
                  {analysis_report.◊†◊ß◊ï◊ì◊ï◊™_◊ó◊ï◊ñ◊ß◊î.map((item: string, index: number) => (
                    <li key={index} className="flex items-start">
                      <span className="text-green-500 mr-2">‚Ä¢</span>
                      <span className="text-green-700">{item}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {/* ◊î◊û◊ú◊¶◊ï◊™ ◊ì◊ó◊ï◊§◊ï◊™ ◊ë◊ô◊ï◊™◊® */}
            {analysis_report.◊î◊û◊ú◊¶◊ï◊™_◊ì◊ó◊ï◊§◊ï◊™_◊ë◊ô◊ï◊™◊® && analysis_report.◊î◊û◊ú◊¶◊ï◊™_◊ì◊ó◊ï◊§◊ï◊™_◊ë◊ô◊ï◊™◊®.length > 0 && (
              <div className="bg-orange-50 border border-orange-200 rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-semibold mb-4 text-orange-700 flex items-center">
                  <span className="mr-2">üéØ</span>
                  ◊î◊û◊ú◊¶◊ï◊™ ◊ì◊ó◊ï◊§◊ï◊™ ◊ë◊ô◊ï◊™◊®
                </h3>
                <ul className="space-y-2">
                  {analysis_report.◊î◊û◊ú◊¶◊ï◊™_◊ì◊ó◊ï◊§◊ï◊™_◊ë◊ô◊ï◊™◊®.map((item: string, index: number) => (
                    <li key={index} className="flex items-start">
                      <span className="text-orange-500 mr-2">‚Ä¢</span>
                      <span className="text-orange-700">{item}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {/* ◊†◊ô◊™◊ï◊ó ◊û◊§◊ï◊®◊ò ◊ë◊ò◊ë◊ú◊ê◊ï◊™ */}
            {getDetailedScores().map((categoryData, categoryIndex) => {
              if (!categoryData.subcategories || categoryData.subcategories.length === 0) return null;
              
              return (
                <div key={categoryIndex} className="bg-white rounded-xl shadow-lg overflow-hidden">
                  <div className="bg-gradient-to-r from-blue-600 to-blue-700 px-6 py-4">
                    <h3 className="text-xl font-semibold text-white flex items-center justify-between">
                      <span>{categoryData.category}</span>
                      <span className={`px-3 py-1 rounded-full text-sm font-bold ${getScoreBg(categoryData.score)}`}>
                        {categoryData.score}/10
                      </span>
                    </h3>
                  </div>
                  
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            ◊§◊®◊û◊ò◊®
                          </th>
                          <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            ◊¶◊ô◊ï◊ü
                          </th>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            ◊™◊ï◊ë◊†◊ï◊™
                          </th>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            ◊ê◊ô◊ö ◊û◊©◊§◊®◊ô◊ù
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {categoryData.subcategories.map((param, paramIndex) => (
                          <tr key={paramIndex} className="hover:bg-gray-50">
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                              {param.name}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-center">
                                                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-bold ${getScoreBg(param.score)}`}>
                                                          {param.score}/10
                              </span>
                            </td>
                            <td className="px-6 py-4 text-sm text-gray-700 max-w-xs">
                              {param.insights}
                            </td>
                            <td className="px-6 py-4 text-sm text-gray-700 max-w-xs">
                              {param.improvements}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              );
            })}



            {/* ◊ì◊í◊ú◊ô◊ù ◊ê◊ì◊ï◊û◊ô◊ù */}
            {red_flags && red_flags.length > 0 && (
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-semibold mb-4 text-red-700">üö® ◊ì◊í◊ú◊ô◊ù ◊ê◊ì◊ï◊û◊ô◊ù</h3>
                <div className="space-y-4">
                  {red_flags.map((flag: any, index: number) => {
                    if (typeof flag === 'object' && flag !== null) {
                      return (
                        <div key={index} className="bg-red-50 border border-red-200 p-4 rounded-lg">
                          <div className="flex items-start space-x-3 rtl:space-x-reverse">
                            <span className="text-red-500 text-xl">‚ö†Ô∏è</span>
                            <div className="flex-1">
                              <h4 className="font-semibold text-red-800 mb-2">{flag.◊ß◊ò◊í◊ï◊®◊ô◊î || '◊ì◊í◊ú ◊ê◊ì◊ï◊ù'}</h4>
                              <p className="text-red-700 mb-2">{flag.◊î◊¢◊®◊î}</p>
                              {flag.◊¶◊ô◊ï◊ü && (
                                <div className="text-sm text-red-600">◊¶◊ô◊ï◊ü: {flag.◊¶◊ô◊ï◊ü}/10</div>
                              )}
                              {flag.◊¶◊ô◊ò◊ï◊ò◊ô◊ù && flag.◊¶◊ô◊ò◊ï◊ò◊ô◊ù.length > 0 && (
                                <div className="mt-3">
                                  <h5 className="font-medium text-red-800 mb-2">◊¶◊ô◊ò◊ï◊ò◊ô◊ù:</h5>
                                  {flag.◊¶◊ô◊ò◊ï◊ò◊ô◊ù.map((quote: any, idx: number) => {
                                    // ◊ï◊ô◊ì◊ï◊ê ◊©◊î◊¶◊ô◊ò◊ï◊ò ◊î◊ï◊ê ◊û◊ó◊®◊ï◊ñ◊™
                                    const quoteText = typeof quote === 'string' ? quote : 
                                                     quote?.text || quote?.◊¶◊ô◊ò◊ï◊ò || 
                                                     (typeof quote === 'object' ? JSON.stringify(quote) : String(quote));
                                    
                                    const timestampSeconds = typeof quoteText === 'string' ? findTimestampForQuote(quoteText) : null;
                                    const isCurrentlyPlaying = typeof quoteText === 'string' ? isQuotePlaying(quoteText) : false;
                                    
                                    return (
                                      <div 
                                        key={idx} 
                                        className={`p-3 rounded border-r-4 border-red-400 mb-2 transition-all ${
                                          isCurrentlyPlaying 
                                            ? 'bg-red-100 shadow-md ring-2 ring-red-300' 
                                            : 'bg-white hover:bg-red-50'
                                        }`}
                                        data-quote={quoteText}
                                      >
                                        <div className="flex justify-between items-start">
                                          <div className="flex-1">
                                            {isCurrentlyPlaying && (
                                              <div className="flex items-center text-red-600 animate-pulse mb-1">
                                                <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                  <path fillRule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.617.817L4.906 14H2a1 1 0 01-1-1V7a1 1 0 011-1h2.906l3.477-2.817z" clipRule="evenodd"/>
                                                </svg>
                                                <span className="text-xs font-medium">◊û◊†◊í◊ü</span>
                                              </div>
                                            )}
                                            <p className={`text-sm transition-colors ${
                                              isCurrentlyPlaying ? 'text-red-800 font-medium' : 'text-gray-700'
                                            }`}>
                                              "{quoteText}"
                                            </p>
                                          </div>
                                          
                                          {timestampSeconds !== undefined && timestampSeconds !== null && audioUrl && (
                                            <div className="mr-2 flex items-center space-x-1">
                                              {isCurrentlyPlaying ? (
                                                <button 
                                                  onClick={stopQuote}
                                                  className="flex items-center px-2 py-1 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors text-xs"
                                                  title="◊¢◊¶◊ï◊® ◊î◊©◊û◊¢◊î"
                                                >
                                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clipRule="evenodd" />
                                                  </svg>
                                                </button>
                                              ) : (
                                                <button 
                                                  onClick={() => playQuote(timestampSeconds, quoteText)}
                                                  className="flex items-center px-2 py-1 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors text-xs"
                                                  title="◊î◊©◊û◊¢ ◊¶◊ô◊ò◊ï◊ò ◊ñ◊î"
                                                  data-quote={quoteText}
                                                >
                                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd" />
                                                  </svg>
                                                </button>
                                              )}
                                            </div>
                                          )}
                                        </div>
                                      </div>
                                    );
                                  })}
                                </div>
                              )}
                              {flag.◊ó◊ú◊ï◊§◊ï◊™_◊û◊ô◊ú◊ï◊ú◊ô◊ï◊™ && flag.◊ó◊ú◊ï◊§◊ï◊™_◊û◊ô◊ú◊ï◊ú◊ô◊ï◊™.length > 0 && (
                                <div className="mt-3">
                                  <h5 className="font-medium text-green-800 mb-2">◊ó◊ú◊ï◊§◊ï◊™ ◊û◊ï◊û◊ú◊¶◊ï◊™:</h5>
                                  {flag.◊ó◊ú◊ï◊§◊ï◊™_◊û◊ô◊ú◊ï◊ú◊ô◊ï◊™.map((alternative: string, idx: number) => (
                                    <div key={idx} className="bg-green-50 p-2 rounded border-r-4 border-green-400 mb-2">
                                      <p className="text-green-700 text-sm">‚ú® {alternative}</p>
                                    </div>
                                  ))}
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      )
                    }
                    return (
                      <div key={index} className="bg-red-50 border border-red-200 p-4 rounded-lg">
                        <div className="flex items-start space-x-3 rtl:space-x-reverse">
                          <span className="text-red-500 text-xl">‚ö†Ô∏è</span>
                          <p className="text-red-700 flex-1">
                            {typeof flag === 'string' ? flag : JSON.stringify(flag)}
                          </p>
                        </div>
                      </div>
                    )
                  })}
                </div>
              </div>
            )}

            {/* ◊°◊ô◊õ◊ï◊ù ◊õ◊ú◊ú◊ô ◊¢◊ù ◊î◊û◊ú◊¶◊ï◊™ ◊§◊®◊ß◊ò◊ô◊ï◊™ */}
            <div className="bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl shadow-lg p-6 border border-blue-200">
              <h3 className="text-xl font-semibold mb-4 text-blue-800 flex items-center">
                <span className="mr-2">üéØ</span>
                ◊°◊ô◊õ◊ï◊ù ◊õ◊ú◊ú◊ô ◊ï◊î◊û◊ú◊¶◊ï◊™ ◊§◊®◊ß◊ò◊ô◊ï◊™
              </h3>
              
              {/* ◊†◊ß◊ï◊ì◊ï◊™ ◊ó◊ï◊ñ◊ß ◊ú◊©◊ô◊û◊ï◊® */}
              {strengths_and_preservation_points && strengths_and_preservation_points.length > 0 && (
                <div className="mb-6">
                  <h4 className="font-semibold text-green-700 mb-3 flex items-center">
                    <span className="mr-2">‚úÖ</span>
                    ◊†◊ß◊ï◊ì◊ï◊™ ◊ó◊ï◊ñ◊ß ◊ú◊©◊ô◊û◊ï◊®:
                  </h4>
                  <div className="space-y-2">
                    {strengths_and_preservation_points.map((point: any, index: number) => (
                      <div key={index} className="flex items-start bg-green-50 p-3 rounded-lg border border-green-200">
                        <span className="text-green-500 text-lg mr-2 mt-0.5">üí™</span>
                        <p className="text-gray-700 flex-1">
                          {typeof point === 'string' ? point : JSON.stringify(point)}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* ◊†◊ß◊ï◊ì◊ï◊™ ◊ú◊©◊ô◊§◊ï◊® */}
              {improvement_points && improvement_points.length > 0 && (
                <div className="mb-6">
                  <h4 className="font-semibold text-orange-700 mb-3 flex items-center">
                    <span className="mr-2">üéØ</span>
                    ◊†◊ß◊ï◊ì◊ï◊™ ◊¢◊ô◊ß◊®◊ô◊ï◊™ ◊ú◊©◊ô◊§◊ï◊®:
                  </h4>
                  <div className="space-y-2">
                    {improvement_points.map((point: any, index: number) => (
                      <div key={index} className="flex items-start bg-orange-50 p-3 rounded-lg border border-orange-200">
                        <span className="text-orange-500 text-lg mr-2 mt-0.5">üìà</span>
                        <p className="text-gray-700 flex-1">
                          {typeof point === 'string' ? point : JSON.stringify(point)}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* ◊î◊û◊ú◊¶◊ï◊™ ◊§◊®◊ß◊ò◊ô◊ï◊™ */}
              {practical_recommendations && practical_recommendations.length > 0 && (
                <div>
                  <h4 className="font-semibold text-blue-700 mb-3 flex items-center">
                    <span className="mr-2">üí°</span>
                    ◊î◊û◊ú◊¶◊ï◊™ ◊§◊®◊ß◊ò◊ô◊ï◊™ ◊ú◊ô◊ô◊©◊ï◊ù ◊û◊ô◊ô◊ì◊ô:
                  </h4>
                  <div className="space-y-2">
                    {practical_recommendations.map((rec: any, index: number) => (
                      <div key={index} className="flex items-start bg-blue-50 p-4 rounded-lg border border-blue-200">
                        <span className="text-blue-500 text-lg mr-2 mt-0.5">üí°</span>
                        <p className="text-gray-700 flex-1 font-medium">
                          {typeof rec === 'string' ? rec : JSON.stringify(rec)}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* ◊î◊ï◊°◊§◊™ ◊î◊û◊ú◊¶◊î ◊ú◊™◊®◊í◊ï◊ú ◊ê◊ù ◊î◊¶◊ô◊ï◊ü ◊†◊û◊ï◊ö */}
              {finalOverallScore < 8 && (
                <div className="mt-6 p-4 bg-purple-50 rounded-lg border border-purple-200">
                  <h4 className="font-semibold text-purple-700 mb-2 flex items-center">
                    <span className="mr-2">üèãÔ∏è‚Äç‚ôÇÔ∏è</span>
                    ◊î◊û◊ú◊¶◊î ◊ú◊™◊®◊í◊ï◊ú ◊†◊ï◊°◊£:
                  </h4>
                  <p className="text-purple-700">
                    {finalOverallScore >= 7 
                      ? '◊î◊ë◊ô◊¶◊ï◊¢◊ô◊ù ◊°◊ë◊ô◊®◊ô◊ù, ◊ê◊ö ◊¢◊ì◊ô◊ô◊ü ◊ô◊© ◊û◊ß◊ï◊ù ◊ú◊©◊ô◊§◊ï◊®. ◊û◊ï◊û◊ú◊• ◊ú◊¢◊ë◊ï◊® ◊ú◊ó◊ì◊® ◊î◊õ◊ï◊©◊® ◊ï◊ú◊ë◊¶◊¢ ◊°◊ô◊û◊ï◊ú◊¶◊ô◊ï◊™ ◊™◊®◊í◊ï◊ú ◊õ◊ì◊ô ◊ú◊î◊í◊ô◊¢ ◊ú◊®◊û◊î ◊û◊¢◊ï◊ú◊î.'
                      : '◊ë◊î◊™◊ë◊°◊° ◊¢◊ú ◊î◊¶◊ô◊ï◊ü ◊©◊ß◊ô◊ë◊ú◊™, ◊ì◊®◊ï◊© ◊©◊ô◊§◊ï◊® ◊û◊©◊û◊¢◊ï◊™◊ô. ◊û◊ï◊û◊ú◊• ◊ë◊ó◊ï◊ù ◊ú◊¢◊ë◊ï◊® ◊ú◊ó◊ì◊® ◊î◊õ◊ï◊©◊® ◊ï◊ú◊ë◊¶◊¢ ◊°◊ô◊û◊ï◊ú◊¶◊ô◊ï◊™ ◊™◊®◊í◊ï◊ú ◊û◊®◊ï◊ë◊ï◊™ ◊õ◊ì◊ô ◊ú◊©◊§◊® ◊ê◊™ ◊î◊ë◊ô◊¶◊ï◊¢◊ô◊ù ◊ë◊ê◊ñ◊ï◊®◊ô◊ù ◊©◊ñ◊ï◊î◊ï ◊ú◊©◊ô◊§◊ï◊®.'
                    }
                  </p>
                  <div className="mt-3">
                    <a 
                      href="/simulations" 
                      className="inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm font-medium"
                    >
                      üèãÔ∏è‚Äç‚ôÇÔ∏è ◊¢◊ë◊ï◊® ◊ú◊ó◊ì◊® ◊î◊õ◊ï◊©◊®
                    </a>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'quotes' && (
          <div className="space-y-6">
            {/* ◊õ◊ï◊™◊®◊™ ◊î◊¶◊ô◊ò◊ï◊ò◊ô◊ù */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-semibold text-gray-800 flex items-center">
                  <span className="mr-2">üí¨</span>
                  ◊¶◊ô◊ò◊ï◊ò◊ô◊ù ◊®◊ú◊ï◊ï◊†◊ò◊ô◊ô◊ù
                </h3>
                <div className="text-sm text-gray-600">
                  {all_quotes && all_quotes.length > 0 ? `${all_quotes.length} ◊¶◊ô◊ò◊ï◊ò◊ô◊ù` : '◊ê◊ô◊ü ◊¶◊ô◊ò◊ï◊ò◊ô◊ù'}
                </div>
              </div>
              
              {all_quotes && all_quotes.length > 0 ? (
                <div className="space-y-4">
                  {all_quotes.map((quote: any, idx: number) => {
                    const quoteText = quote.text || quote.quote || quote.◊¶◊ô◊ò◊ï◊ò || quote.content || '';
                    const comment = quote.comment || quote.◊î◊¢◊®◊î || quote.impact || quote.analysis || '';
                    const category = quote.category || quote.◊ß◊ò◊í◊ï◊®◊ô◊î || '◊õ◊ú◊ú◊ô';
                    const alternative = quote.alternative || '';
                    
                                         // ◊î◊ó◊ú◊§◊™ ◊©◊û◊ï◊™ ◊ú◊†◊¶◊ô◊í/◊ú◊ß◊ï◊ó - ◊§◊ï◊†◊ß◊¶◊ô◊î ◊û◊©◊ï◊§◊®◊™
                     const anonymizedQuote = quoteText.replace(/([◊ê-◊™]+)(\s*:)/g, (match: string, name: string, colon: string) => {
                       // ◊ë◊ì◊ô◊ß◊î ◊ê◊ù ◊ñ◊î ◊©◊ù ◊†◊¶◊ô◊í ◊ê◊ï ◊ú◊ß◊ï◊ó ◊ú◊§◊ô ◊î◊ß◊©◊®
                       const lowerName = name.toLowerCase();
                       if (lowerName.includes('◊†◊¶◊ô◊í') || lowerName.includes('◊û◊ï◊õ◊®') || lowerName.includes('◊©◊ô◊®◊ï◊™') || 
                           lowerName.includes('agent') || lowerName.includes('sales')) {
                         return '◊î◊†◊¶◊ô◊í' + colon;
                       }
                       return '◊î◊ú◊ß◊ï◊ó' + colon;
                     });
                    
                    // ◊ó◊ô◊§◊ï◊© timestamp
                    let timestampSeconds = quote.timestamp_seconds;
                    if (!timestampSeconds && quote.timestamp) {
                      const timestamp = quote.timestamp;
                      if (timestamp && timestamp.includes(':')) {
                        const parts = timestamp.split('-')[0].split(':');
                        if (parts.length === 2) {
                          timestampSeconds = parseInt(parts[0]) * 60 + parseInt(parts[1]);
                        }
                      }
                    }
                    if (!timestampSeconds && quoteText) {
                      timestampSeconds = findTimestampForQuote(quoteText);
                    }
                    
                    const isCurrentlyPlaying = isQuotePlaying(quoteText);
                    
                    return (
                      <div 
                        key={idx} 
                        className={`transition-all duration-300 border rounded-lg p-4 ${
                          isCurrentlyPlaying 
                            ? 'bg-gradient-to-r from-blue-100 to-blue-50 border-blue-400 shadow-lg ring-2 ring-blue-300' 
                            : 'bg-gray-50 border-gray-200 hover:bg-blue-50 hover:border-blue-300'
                        }`}
                      >
                        <div className="flex justify-between items-start">
                          <div className="flex-1">
                            <div className="flex items-center mb-2">
                              <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium mr-2">
                                {category}
                              </span>
                              {isCurrentlyPlaying && (
                                <div className="flex items-center text-blue-600 animate-pulse">
                                  <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fillRule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.617.817L4.906 14H2a1 1 0 01-1-1V7a1 1 0 011-1h2.906l3.477-2.817z" clipRule="evenodd"/>
                                  </svg>
                                  <span className="text-sm font-medium">◊û◊†◊í◊ü ◊õ◊¢◊™</span>
                                </div>
                              )}
                            </div>
                            
                            <p className={`italic mb-2 text-lg transition-colors ${
                              isCurrentlyPlaying ? 'text-blue-800 font-medium' : 'text-gray-700'
                            }`}>
                              "{anonymizedQuote}"
                            </p>
                            
                            {comment && (
                              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mt-2">
                                <p className="text-sm text-blue-800">
                                  üí≠ <strong>◊î◊¢◊®◊î:</strong> {comment}
                                </p>
                              </div>
                            )}
                            
                            {alternative && (
                              <div className="bg-green-50 border border-green-200 rounded-lg p-3 mt-2">
                                <p className="text-sm text-green-800">
                                  ‚ú® <strong>◊ê◊ô◊ö ◊¶◊®◊ô◊ö ◊î◊ô◊î ◊ú◊†◊°◊ó:</strong> "{alternative}"
                                </p>
                              </div>
                            )}
                          </div>
                          
                          <div className="flex items-center space-x-2 rtl:space-x-reverse mr-4">
                            {timestampSeconds !== undefined && timestampSeconds !== null && audioUrl && (
                              <>
                                {isCurrentlyPlaying ? (
                                  <button 
                                    onClick={stopQuote}
                                    className="flex items-center px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors font-medium shadow-md"
                                    title="◊¢◊¶◊ï◊® ◊î◊©◊û◊¢◊î"
                                  >
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clipRule="evenodd" />
                                    </svg>
                                    ◊¢◊¶◊ï◊®
                                  </button>
                                ) : (
                                  <button 
                                    onClick={() => playQuote(timestampSeconds, quoteText)}
                                    className="flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium shadow-md"
                                    title="◊î◊©◊û◊¢ ◊ê◊™ ◊î◊¶◊ô◊ò◊ï◊ò ◊ë◊ê◊ï◊ì◊ô◊ï"
                                  >
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd" />
                                    </svg>
                                    ◊î◊©◊û◊¢ ◊ë-{formatTime(timestampSeconds)}
                                  </button>
                                )}
                              </>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  <span className="text-4xl mb-2 block">üìù</span>
                  <p>◊ú◊ê ◊†◊û◊¶◊ê◊ï ◊¶◊ô◊ò◊ï◊ò◊ô◊ù ◊®◊ú◊ï◊ï◊†◊ò◊ô◊ô◊ù</p>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'transcript' && (
          <div className="space-y-6">
            {call.transcript ? (
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-semibold mb-6 text-gray-800">üìÑ ◊™◊û◊ú◊ô◊ú ◊î◊©◊ô◊ó◊î</h3>
                <div className="bg-gray-50 p-6 rounded-lg border">
                  <p className="text-gray-700 whitespace-pre-wrap leading-relaxed text-lg">
                    {call.transcript}
                  </p>
                </div>
              </div>
            ) : (
              <div className="bg-white rounded-xl shadow-lg p-8 text-center">
                <div className="text-gray-400 text-6xl mb-4">üìÑ</div>
                <h3 className="text-xl font-semibold text-gray-600 mb-2">◊™◊û◊ú◊ô◊ú ◊ú◊ê ◊ñ◊û◊ô◊ü</h3>
                <p className="text-gray-500">
                  {call.analysis_type === 'tone' 
                    ? '◊™◊û◊ú◊ô◊ú ◊ú◊ê ◊†◊ï◊¶◊® ◊¢◊ë◊ï◊® ◊†◊ô◊™◊ï◊ó ◊ò◊ï◊†◊¶◊ô◊î ◊ë◊ú◊ë◊ì' 
                    : '◊™◊û◊ú◊ô◊ú ◊î◊©◊ô◊ó◊î ◊ú◊ê ◊ñ◊û◊ô◊ü ◊õ◊®◊í◊¢'}
                </p>
              </div>
            )}
          </div>
        )}

        {/* ◊î◊¢◊®◊ï◊™ ◊†◊¶◊ô◊í */}
        {call.agent_notes && (
          <div className="mt-8 bg-yellow-50 border border-yellow-200 rounded-xl shadow-lg p-6">
            <h3 className="text-lg font-semibold mb-4 text-yellow-800 flex items-center">
              <span className="mr-2">üìù</span>
              ◊î◊¢◊®◊ï◊™ ◊î◊†◊¶◊ô◊í
            </h3>
            <div className="bg-white p-4 rounded-lg border border-yellow-100">
              <p className="text-gray-700 leading-relaxed">{call.agent_notes}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  )
} 